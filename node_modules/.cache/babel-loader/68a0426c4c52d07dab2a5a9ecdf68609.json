{"ast":null,"code":"var _jsxFileName = \"/home/italorennan/csc03FrontEnd/src/sections/Local/Statistics.js\";\nimport React, { useState } from 'react';\nimport { Text, Button } from '../../pages/Local/styles';\nimport { XYPlot, LineSeries, LineMarkSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, ChartLabel } from 'react-vis';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDateTimePicker } from '@material-ui/pickers';\n\nfunction Statistics() {\n  const [state, setState] = useState({\n    minDate: new Date(new Date(Date.now()).getFullYear(), new Date(Date.now()).getMonth(), new Date(Date.now()).getDate(), 0, 0, 0, 0),\n    maxDate: new Date(new Date(Date.now()).getFullYear(), new Date(Date.now()).getMonth(), new Date(Date.now()).getDate(), 23, 59, 59, 999),\n    timeScale: \"hours\",\n    events: [],\n    data: [],\n    labels: []\n  });\n  const monthName = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\n\n  const handleMinDate = date => {\n    const timeDif = state.maxDate - date;\n\n    if (timeDif > 0) {\n      //setState({...state, minDate: date});\n      getData(date, state.maxDate);\n    }\n  };\n\n  const handleMaxDate = date => {\n    const timeDif = date - state.minDate;\n\n    if (timeDif > 0) {\n      //setState({...state, maxDate: date});\n      getData(state.minDate, date);\n    }\n  };\n\n  const getData = (minDate, maxDate) => {\n    // Puxar dados do DB\n    const newEvents = [{\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 2)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 2)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 4, 30)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 3, 30)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 3, 30)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 3, 15)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 3, 7)\n    }];\n    const timeDif = maxDate - minDate;\n    if (timeDif <= 7200000) setState({ ...state,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"minutes\"\n    });else if (timeDif <= 172800000) setState({ ...state,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"hours\"\n    });else if (timeDif <= 5259600000) setState({ ...state,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"days\"\n    });else setState({ ...state,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"months\"\n    });\n  };\n\n  const handleUpdate = () => {\n    switch (state.timeScale) {\n      case \"minutes\":\n        filterMinutesData();\n        break;\n\n      case \"hours\":\n        filterHoursData();\n        break;\n\n      case \"days\":\n        filterDaysData();\n        break;\n\n      case \"months\":\n        filterMonthsData();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const filterMinutesData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), state.minDate.getMinutes(), 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), state.maxDate.getMinutes(), 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 600000);\n    console.log(periods);\n  };\n\n  const filterHoursData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), 0, 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), 1, 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 3600000);\n    console.log(periods);\n  };\n\n  const filterDaysData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), 0, 0, 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), 1, 0, 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 86400000);\n    console.log(periods);\n  };\n\n  const filterMonthsData = () => {\n    const periods = (state.maxDate.getFullYear() - state.minDate.getFullYear()) * 12 + (state.maxDate.getMonth() - state.minDate.getMonth()) + 1;\n    var newData = [];\n    var newLabels = [];\n\n    const filter = (year, month) => {\n      return state.events.filter(el => el.eventType === \"exit\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month);\n    };\n\n    for (var i = 0; i < periods; i++) {\n      const year = state.minDate.getFullYear();\n      const month = state.minDate.getMonth() + i;\n      const newEvents = filter(year, month);\n      const numberEvents = newEvents.length;\n      newData.push({\n        x: i,\n        y: numberEvents\n      });\n      newLabels.push(monthName[month] + \" de \" + year.toString());\n    }\n\n    setState({ ...state,\n      data: newData,\n      labels: newLabels\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, \"Selecionar per\\xEDodo de visualiza\\xE7\\xE3o:\")), /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KeyboardDateTimePicker, {\n    variant: \"inline\",\n    ampm: false,\n    label: \"Limite inferior\",\n    value: state.minDate,\n    format: \"dd/MM/yyyy HH:mm\",\n    onChange: handleMinDate,\n    disableFuture: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(KeyboardDateTimePicker, {\n    variant: \"inline\",\n    ampm: false,\n    label: \"Limite superior\",\n    value: state.maxDate,\n    format: \"dd/MM/yyyy HH:mm\",\n    onChange: handleMaxDate,\n    disableFuture: true,\n    minDate: state.minDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: \"upstatetatistics\",\n    onClick: handleUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, \"Atualizar\"), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }, \"Gr\\xE1ficos\")), /*#__PURE__*/React.createElement(XYPlot, {\n    width: 300,\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(VerticalGridLines, {\n    style: {\n      stroke: '#555555'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(HorizontalGridLines, {\n    style: {\n      stroke: '#555555'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    title: 'Período',\n    on0: true,\n    tickTotal: state.data.length,\n    tickLabelAngle: -45,\n    tickFormat: v => state.labels[v],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    title: 'Clientes',\n    on0: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(LineMarkSeries, {\n    className: \"series\",\n    data: state.data,\n    style: {\n      strokeWidth: '3px'\n    },\n    lineStyle: {\n      stroke: 'red'\n    },\n    markStyle: {\n      stroke: 'blue'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, \"Tabelas\")), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 15\n    }\n  }, \"Indicadores\")), console.log(state));\n}\n\nexport default Statistics;","map":{"version":3,"sources":["/home/italorennan/csc03FrontEnd/src/sections/Local/Statistics.js"],"names":["React","useState","Text","Button","XYPlot","LineSeries","LineMarkSeries","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","ChartLabel","DateFnsUtils","MuiPickersUtilsProvider","KeyboardDateTimePicker","Statistics","state","setState","minDate","Date","now","getFullYear","getMonth","getDate","maxDate","timeScale","events","data","labels","monthName","handleMinDate","date","timeDif","getData","handleMaxDate","newEvents","eventType","createdAt","handleUpdate","filterMinutesData","filterHoursData","filterDaysData","filterMonthsData","initialData","getHours","getMinutes","finalData","periods","Math","ceil","console","log","newData","newLabels","filter","year","month","el","i","numberEvents","length","push","x","y","toString","stroke","v","strokeWidth"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Text, Button } from '../../pages/Local/styles';\nimport { XYPlot, LineSeries, LineMarkSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, ChartLabel } from 'react-vis';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDateTimePicker } from '@material-ui/pickers';\n\nfunction Statistics() {\n    const [state, setState] = useState({minDate: new Date((new Date(Date.now())).getFullYear(), (new Date(Date.now())).getMonth(), (new Date(Date.now())).getDate(), 0, 0, 0, 0),\n                                        maxDate: new Date((new Date(Date.now())).getFullYear(), (new Date(Date.now())).getMonth(), (new Date(Date.now())).getDate(), 23, 59, 59, 999),\n                                        timeScale: \"hours\",\n                                        events: [],\n                                        data: [],\n                                        labels: []});\n\n    const monthName = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\n\n    const handleMinDate = (date: Date | null) => {\n        const timeDif = state.maxDate - date;\n        if (timeDif > 0) {\n            //setState({...state, minDate: date});\n            getData(date, state.maxDate);\n        }\n    }\n\n    const handleMaxDate = (date: Date | null) => {\n        const timeDif = date - state.minDate;\n        if (timeDif > 0) {\n            //setState({...state, maxDate: date});\n            getData(state.minDate, date);\n        }\n    }\n\n    const getData = (minDate, maxDate) => {\n        // Puxar dados do DB\n        const newEvents = [\n            {eventType: \"entry\",\n             createdAt: new Date(2020, 5, 2)},\n            {eventType: \"exit\",\n             createdAt: new Date(2020, 5, 2)},\n            {eventType: \"exit\",\n             createdAt: new Date(2020, 4, 30)},\n            {eventType: \"exit\",\n             createdAt: new Date(2020, 3, 30)},\n            {eventType: \"entry\",\n             createdAt: new Date(2020, 3, 30)},\n            {eventType: \"exit\",\n             createdAt: new Date(2020, 3, 15)},\n            {eventType: \"exit\",\n             createdAt: new Date(2020, 3, 7)}\n        ];\n\n        const timeDif = maxDate - minDate;\n        if (timeDif <= 7200000) setState({...state, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"minutes\"});\n        else if (timeDif <= 172800000) setState({...state, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"hours\"});\n        else if (timeDif <= 5259600000) setState({...state, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"days\"});\n        else setState({...state, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"months\"});\n    }\n\n    const handleUpdate = () => {\n        switch (state.timeScale) {\n            case \"minutes\": filterMinutesData(); break;\n            case \"hours\": filterHoursData(); break;\n            case \"days\": filterDaysData(); break;\n            case \"months\": filterMonthsData(); break;\n            default: break;\n        }\n    }\n\n    const filterMinutesData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), state.minDate.getMinutes(), 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), state.maxDate.getMinutes(), 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 600000);\n\n        console.log(periods);\n    }\n\n    const filterHoursData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), 0, 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), 1, 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 3600000);\n\n        console.log(periods);\n    }\n\n    const filterDaysData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), 0, 0, 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), 1, 0, 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 86400000);\n\n        console.log(periods);\n    }\n\n    const filterMonthsData = () => {\n        const periods = (state.maxDate.getFullYear() - state.minDate.getFullYear()) * 12 + (state.maxDate.getMonth() - state.minDate.getMonth()) + 1;\n\n        var newData = [];\n        var newLabels = [];\n\n        const filter = (year, month) => {\n            return state.events.filter(el => (el.eventType === \"exit\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month));\n        }\n\n        for (var i = 0; i < periods; i++) {\n            const year = state.minDate.getFullYear();\n            const month = state.minDate.getMonth() + i;\n            \n            const newEvents = filter(year, month);\n            const numberEvents = newEvents.length;\n            newData.push({ x: i, y: numberEvents });\n            newLabels.push(monthName[month] + \" de \" + year.toString());\n        }\n\n        setState({...state, data: newData, labels: newLabels});\n    }\n\n    return (\n        <>\n        <Text><span>Selecionar período de visualização:</span></Text>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDateTimePicker \n                variant=\"inline\" ampm={false}\n                label=\"Limite inferior\"\n                value={state.minDate} format=\"dd/MM/yyyy HH:mm\"\n                onChange={handleMinDate} disableFuture\n            />\n            <KeyboardDateTimePicker \n                variant=\"inline\" ampm={false}\n                label=\"Limite superior\"\n                value={state.maxDate} format=\"dd/MM/yyyy HH:mm\"\n                onChange={handleMaxDate} disableFuture minDate={state.minDate}\n            />\n        </MuiPickersUtilsProvider>\n        \n        <Button className=\"upstatetatistics\" onClick={handleUpdate}>Atualizar</Button>\n\n        <Text><span>Gráficos</span></Text>\n\n        <XYPlot width={300} height={300}>\n            <VerticalGridLines style={{ stroke: '#555555' }}/>\n            <HorizontalGridLines style={{ stroke: '#555555' }}/>\n            <XAxis \n                title={'Período'} on0={true}\n                tickTotal={state.data.length} tickLabelAngle={-45}\n                tickFormat={v => state.labels[v]}\n            />\n            <YAxis \n                title={'Clientes'} on0={true}\n            />\n            <LineMarkSeries \n                className=\"series\" data={state.data} \n                style={{ strokeWidth: '3px' }}\n                lineStyle={{ stroke: 'red' }} markStyle={{ stroke: 'blue' }}\n            />\n        </XYPlot>\n\n        <Text><span>Tabelas</span></Text>\n\n\n        <Text><span>Indicadores</span></Text>\n\n        {console.log(state)}\n        </>\n    );\n}\n\nexport default Statistics;"]},"metadata":{},"sourceType":"module"}