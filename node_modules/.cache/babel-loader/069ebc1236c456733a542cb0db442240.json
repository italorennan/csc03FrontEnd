{"ast":null,"code":"var _jsxFileName = \"/home/italorennan/csc03FrontEnd/src/sections/Local/Statistics.js\";\nimport React, { useState } from 'react';\nimport { Text, Button, HintDiv } from '../../pages/Local/styles';\nimport { XYPlot, LineSeries, LineMarkSeries, XAxis, YAxis, Hint } from 'react-vis';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDateTimePicker } from '@material-ui/pickers';\nimport 'react-vis/dist/style.css';\n\nfunction Statistics() {\n  const [state, setState] = useState({\n    minDate: new Date(new Date(Date.now()).getFullYear(), new Date(Date.now()).getMonth(), new Date(Date.now()).getDate(), 0, 0, 0, 0),\n    maxDate: new Date(new Date(Date.now()).getFullYear(), new Date(Date.now()).getMonth(), new Date(Date.now()).getDate(), 23, 59, 59, 999),\n    timeScale: \"hours\",\n    events: [],\n    firstData: [],\n    labels: [],\n    firstMaxY: 0,\n    overFirstGraph: false\n  });\n  const monthName = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\n\n  const handleMinDate = date => {\n    const timeDif = state.maxDate - date;\n\n    if (timeDif > 0) {\n      //setState({...state, minDate: date});\n      getData(date, state.maxDate);\n    }\n  };\n\n  const handleMaxDate = date => {\n    const timeDif = date - state.minDate;\n\n    if (timeDif > 0) {\n      //setState({...state, maxDate: date});\n      getData(state.minDate, date);\n    }\n  };\n\n  const getData = (minDate, maxDate) => {\n    // Puxar dados do DB\n    const newEvents = [{\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 2)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 2)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 4, 30)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 3, 30)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 3, 30)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 3, 15)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 3, 7)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 10)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 14)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 20)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 2)\n    }];\n    const timeDif = maxDate - minDate;\n    if (timeDif <= 7200000) setState({ ...state,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"minutes\"\n    });else if (timeDif <= 172800000) setState({ ...state,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"hours\"\n    });else if (timeDif <= 5259600000) setState({ ...state,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"days\"\n    });else setState({ ...state,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"months\"\n    });\n  };\n\n  const handleUpdate = () => {\n    switch (state.timeScale) {\n      case \"minutes\":\n        filterMinutesData();\n        break;\n\n      case \"hours\":\n        filterHoursData();\n        break;\n\n      case \"days\":\n        filterDaysData();\n        break;\n\n      case \"months\":\n        filterMonthsData();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const filterMinutesData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), state.minDate.getMinutes(), 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), state.maxDate.getMinutes(), 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 600000);\n    console.log(periods);\n  };\n\n  const filterHoursData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), 0, 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), 1, 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 3600000);\n    console.log(periods);\n  };\n\n  const filterDaysData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), 0, 0, 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), 1, 0, 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 86400000);\n    console.log(periods);\n  };\n\n  const filterMonthsData = () => {\n    const periods = (state.maxDate.getFullYear() - state.minDate.getFullYear()) * 12 + (state.maxDate.getMonth() - state.minDate.getMonth()) + 1;\n    var newFirstData = [];\n    var newLabels = [];\n    var newFirstMaxY = 0;\n\n    const filter = (year, month) => {\n      return state.events.filter(el => el.eventType === \"exit\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month);\n    };\n\n    for (var i = 0; i < periods; i++) {\n      var year = state.minDate.getFullYear();\n      var month = state.minDate.getMonth() + i;\n\n      if (month >= 12) {\n        year += Math.floor(month / 12);\n        month = month % 12;\n      }\n\n      const newEvents = filter(year, month);\n      const numberEvents = newEvents.length;\n      newFirstData.push({\n        x: i,\n        y: numberEvents\n      });\n      newLabels.push(monthName[month] + \" de \" + year.toString());\n      if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n    }\n\n    setState({ ...state,\n      firstData: newFirstData,\n      labels: newLabels,\n      firstMaxY: newFirstMaxY + 1\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }, \"Selecionar per\\xEDodo de visualiza\\xE7\\xE3o:\")), /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KeyboardDateTimePicker, {\n    variant: \"inline\",\n    ampm: false,\n    label: \"Limite inferior\",\n    value: state.minDate,\n    format: \"dd/MM/yyyy HH:mm\",\n    onChange: handleMinDate,\n    disableFuture: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(KeyboardDateTimePicker, {\n    variant: \"inline\",\n    ampm: false,\n    label: \"Limite superior\",\n    value: state.maxDate,\n    format: \"dd/MM/yyyy HH:mm\",\n    onChange: handleMaxDate,\n    disableFuture: true,\n    minDate: state.minDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: \"upstatetatistics\",\n    onClick: handleUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, \"Atualizar\"), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 15\n    }\n  }, \"Gr\\xE1ficos\")), /*#__PURE__*/React.createElement(XYPlot, {\n    width: 400,\n    height: 400,\n    margin: {\n      left: 80,\n      bottom: 100\n    },\n    yDomain: [0, state.firstMaxY],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    title: 'Período',\n    on0: true,\n    tickTotal: state.firstData.length,\n    tickLabelAngle: -45,\n    tickFormat: v => state.labels[v],\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    title: 'Clientes',\n    on0: true,\n    tickTotal: state.firstMaxY,\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(LineMarkSeries, {\n    className: \"series\",\n    data: state.firstData,\n    style: {\n      strokeWidth: '3px'\n    },\n    lineStyle: {\n      stroke: '#000066'\n    },\n    markStyle: {\n      stroke: '#009999'\n    },\n    onValueMouseOver: d => setState({ ...state,\n      overFirstGraph: d\n    }),\n    onValueMouseOut: d => setState({ ...state,\n      overFirstGraph: false\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }), state.overFirstGraph && /*#__PURE__*/React.createElement(Hint, {\n    value: state.overFirstGraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(HintDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 24\n    }\n  }, \"Per\\xEDodo:\"), \" \", state.labels[state.overFirstGraph.x]), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 24\n    }\n  }, \"Total de clientes:\"), \" \", state.overFirstGraph.y)))), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 15\n    }\n  }, \"Tabelas\")), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 15\n    }\n  }, \"Indicadores\")), console.log(state));\n}\n\nexport default Statistics;","map":{"version":3,"sources":["/home/italorennan/csc03FrontEnd/src/sections/Local/Statistics.js"],"names":["React","useState","Text","Button","HintDiv","XYPlot","LineSeries","LineMarkSeries","XAxis","YAxis","Hint","DateFnsUtils","MuiPickersUtilsProvider","KeyboardDateTimePicker","Statistics","state","setState","minDate","Date","now","getFullYear","getMonth","getDate","maxDate","timeScale","events","firstData","labels","firstMaxY","overFirstGraph","monthName","handleMinDate","date","timeDif","getData","handleMaxDate","newEvents","eventType","createdAt","handleUpdate","filterMinutesData","filterHoursData","filterDaysData","filterMonthsData","initialData","getHours","getMinutes","finalData","periods","Math","ceil","console","log","newFirstData","newLabels","newFirstMaxY","filter","year","month","el","i","floor","numberEvents","length","push","x","y","toString","left","bottom","v","text","stroke","fill","fontWeight","line","strokeWidth","d"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,OAAvB,QAAsC,0BAAtC;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,cAA7B,EAA6CC,KAA7C,EAAoDC,KAApD,EAA2DC,IAA3D,QAAuE,WAAvE;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,SAASC,uBAAT,EAAkCC,sBAAlC,QAAgE,sBAAhE;AACA,OAAO,0BAAP;;AAEA,SAASC,UAAT,GAAsB;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC;AAACgB,IAAAA,OAAO,EAAE,IAAIC,IAAJ,CAAU,IAAIA,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,CAAD,CAAuBC,WAAvB,EAAT,EAAgD,IAAIF,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,CAAD,CAAuBE,QAAvB,EAA/C,EAAmF,IAAIH,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,CAAD,CAAuBG,OAAvB,EAAlF,EAAoH,CAApH,EAAuH,CAAvH,EAA0H,CAA1H,EAA6H,CAA7H,CAAV;AACCC,IAAAA,OAAO,EAAE,IAAIL,IAAJ,CAAU,IAAIA,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,CAAD,CAAuBC,WAAvB,EAAT,EAAgD,IAAIF,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,CAAD,CAAuBE,QAAvB,EAA/C,EAAmF,IAAIH,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,CAAD,CAAuBG,OAAvB,EAAlF,EAAoH,EAApH,EAAwH,EAAxH,EAA4H,EAA5H,EAAgI,GAAhI,CADV;AAECE,IAAAA,SAAS,EAAE,OAFZ;AAGCC,IAAAA,MAAM,EAAE,EAHT;AAICC,IAAAA,SAAS,EAAE,EAJZ;AAKCC,IAAAA,MAAM,EAAE,EALT;AAMCC,IAAAA,SAAS,EAAE,CANZ;AAOCC,IAAAA,cAAc,EAAE;AAPjB,GAAD,CAAlC;AASA,QAAMC,SAAS,GAAG,CAAC,SAAD,EAAY,WAAZ,EAAyB,OAAzB,EAAkC,OAAlC,EAA2C,MAA3C,EAAmD,OAAnD,EAA4D,OAA5D,EAAqE,QAArE,EAA+E,UAA/E,EAA2F,SAA3F,EAAsG,UAAtG,EAAkH,UAAlH,CAAlB;;AAEA,QAAMC,aAAa,GAAIC,IAAD,IAAuB;AACzC,UAAMC,OAAO,GAAGlB,KAAK,CAACQ,OAAN,GAAgBS,IAAhC;;AACA,QAAIC,OAAO,GAAG,CAAd,EAAiB;AACb;AACAC,MAAAA,OAAO,CAACF,IAAD,EAAOjB,KAAK,CAACQ,OAAb,CAAP;AACH;AACJ,GAND;;AAQA,QAAMY,aAAa,GAAIH,IAAD,IAAuB;AACzC,UAAMC,OAAO,GAAGD,IAAI,GAAGjB,KAAK,CAACE,OAA7B;;AACA,QAAIgB,OAAO,GAAG,CAAd,EAAiB;AACb;AACAC,MAAAA,OAAO,CAACnB,KAAK,CAACE,OAAP,EAAgBe,IAAhB,CAAP;AACH;AACJ,GAND;;AAQA,QAAME,OAAO,GAAG,CAACjB,OAAD,EAAUM,OAAV,KAAsB;AAClC;AACA,UAAMa,SAAS,GAAG,CACd;AAACC,MAAAA,SAAS,EAAE,OAAZ;AACCC,MAAAA,SAAS,EAAE,IAAIpB,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB;AADZ,KADc,EAGd;AAACmB,MAAAA,SAAS,EAAE,MAAZ;AACCC,MAAAA,SAAS,EAAE,IAAIpB,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB;AADZ,KAHc,EAKd;AAACmB,MAAAA,SAAS,EAAE,MAAZ;AACCC,MAAAA,SAAS,EAAE,IAAIpB,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AADZ,KALc,EAOd;AAACmB,MAAAA,SAAS,EAAE,MAAZ;AACCC,MAAAA,SAAS,EAAE,IAAIpB,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AADZ,KAPc,EASd;AAACmB,MAAAA,SAAS,EAAE,OAAZ;AACCC,MAAAA,SAAS,EAAE,IAAIpB,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AADZ,KATc,EAWd;AAACmB,MAAAA,SAAS,EAAE,MAAZ;AACCC,MAAAA,SAAS,EAAE,IAAIpB,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AADZ,KAXc,EAad;AAACmB,MAAAA,SAAS,EAAE,MAAZ;AACCC,MAAAA,SAAS,EAAE,IAAIpB,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB;AADZ,KAbc,EAed;AAACmB,MAAAA,SAAS,EAAE,MAAZ;AACCC,MAAAA,SAAS,EAAE,IAAIpB,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AADZ,KAfc,EAiBd;AAACmB,MAAAA,SAAS,EAAE,MAAZ;AACCC,MAAAA,SAAS,EAAE,IAAIpB,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AADZ,KAjBc,EAmBd;AAACmB,MAAAA,SAAS,EAAE,MAAZ;AACCC,MAAAA,SAAS,EAAE,IAAIpB,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AADZ,KAnBc,EAqBd;AAACmB,MAAAA,SAAS,EAAE,MAAZ;AACCC,MAAAA,SAAS,EAAE,IAAIpB,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB;AADZ,KArBc,CAAlB;AAyBA,UAAMe,OAAO,GAAGV,OAAO,GAAGN,OAA1B;AACA,QAAIgB,OAAO,IAAI,OAAf,EAAwBjB,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWE,MAAAA,OAAO,EAAEA,OAApB;AAA6BM,MAAAA,OAAO,EAAEA,OAAtC;AAA+CE,MAAAA,MAAM,EAAEW,SAAvD;AAAkEZ,MAAAA,SAAS,EAAE;AAA7E,KAAD,CAAR,CAAxB,KACK,IAAIS,OAAO,IAAI,SAAf,EAA0BjB,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWE,MAAAA,OAAO,EAAEA,OAApB;AAA6BM,MAAAA,OAAO,EAAEA,OAAtC;AAA+CE,MAAAA,MAAM,EAAEW,SAAvD;AAAkEZ,MAAAA,SAAS,EAAE;AAA7E,KAAD,CAAR,CAA1B,KACA,IAAIS,OAAO,IAAI,UAAf,EAA2BjB,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWE,MAAAA,OAAO,EAAEA,OAApB;AAA6BM,MAAAA,OAAO,EAAEA,OAAtC;AAA+CE,MAAAA,MAAM,EAAEW,SAAvD;AAAkEZ,MAAAA,SAAS,EAAE;AAA7E,KAAD,CAAR,CAA3B,KACAR,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWE,MAAAA,OAAO,EAAEA,OAApB;AAA6BM,MAAAA,OAAO,EAAEA,OAAtC;AAA+CE,MAAAA,MAAM,EAAEW,SAAvD;AAAkEZ,MAAAA,SAAS,EAAE;AAA7E,KAAD,CAAR;AACR,GAhCD;;AAkCA,QAAMe,YAAY,GAAG,MAAM;AACvB,YAAQxB,KAAK,CAACS,SAAd;AACI,WAAK,SAAL;AAAgBgB,QAAAA,iBAAiB;AAAI;;AACrC,WAAK,OAAL;AAAcC,QAAAA,eAAe;AAAI;;AACjC,WAAK,MAAL;AAAaC,QAAAA,cAAc;AAAI;;AAC/B,WAAK,QAAL;AAAeC,QAAAA,gBAAgB;AAAI;;AACnC;AAAS;AALb;AAOH,GARD;;AAUA,QAAMH,iBAAiB,GAAG,MAAM;AAC5B,UAAMI,WAAW,GAAG,IAAI1B,IAAJ,CAASH,KAAK,CAACE,OAAN,CAAcG,WAAd,EAAT,EAAsCL,KAAK,CAACE,OAAN,CAAcI,QAAd,EAAtC,EAAgEN,KAAK,CAACE,OAAN,CAAcK,OAAd,EAAhE,EAAyFP,KAAK,CAACE,OAAN,CAAc4B,QAAd,EAAzF,EAAmH9B,KAAK,CAACE,OAAN,CAAc6B,UAAd,EAAnH,EAA+I,CAA/I,EAAkJ,CAAlJ,CAApB;AACA,UAAMC,SAAS,GAAG,IAAI7B,IAAJ,CAASH,KAAK,CAACQ,OAAN,CAAcH,WAAd,EAAT,EAAsCL,KAAK,CAACQ,OAAN,CAAcF,QAAd,EAAtC,EAAgEN,KAAK,CAACQ,OAAN,CAAcD,OAAd,EAAhE,EAAyFP,KAAK,CAACQ,OAAN,CAAcsB,QAAd,EAAzF,EAAmH9B,KAAK,CAACQ,OAAN,CAAcuB,UAAd,EAAnH,EAA+I,CAA/I,EAAkJ,CAAlJ,CAAlB;AAEA,UAAME,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAU,CAACH,SAAS,GAAGH,WAAb,IAA4B,MAAtC,CAAhB;AAEAO,IAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACH,GAPD;;AASA,QAAMP,eAAe,GAAG,MAAM;AAC1B,UAAMG,WAAW,GAAG,IAAI1B,IAAJ,CAASH,KAAK,CAACE,OAAN,CAAcG,WAAd,EAAT,EAAsCL,KAAK,CAACE,OAAN,CAAcI,QAAd,EAAtC,EAAgEN,KAAK,CAACE,OAAN,CAAcK,OAAd,EAAhE,EAAyFP,KAAK,CAACE,OAAN,CAAc4B,QAAd,EAAzF,EAAmH,CAAnH,EAAsH,CAAtH,EAAyH,CAAzH,CAApB;AACA,UAAME,SAAS,GAAG,IAAI7B,IAAJ,CAASH,KAAK,CAACQ,OAAN,CAAcH,WAAd,EAAT,EAAsCL,KAAK,CAACQ,OAAN,CAAcF,QAAd,EAAtC,EAAgEN,KAAK,CAACQ,OAAN,CAAcD,OAAd,EAAhE,EAAyFP,KAAK,CAACQ,OAAN,CAAcsB,QAAd,EAAzF,EAAmH,CAAnH,EAAsH,CAAtH,EAAyH,CAAzH,CAAlB;AAEA,UAAMG,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAU,CAACH,SAAS,GAAGH,WAAb,IAA4B,OAAtC,CAAhB;AAEAO,IAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACH,GAPD;;AASA,QAAMN,cAAc,GAAG,MAAM;AACzB,UAAME,WAAW,GAAG,IAAI1B,IAAJ,CAASH,KAAK,CAACE,OAAN,CAAcG,WAAd,EAAT,EAAsCL,KAAK,CAACE,OAAN,CAAcI,QAAd,EAAtC,EAAgEN,KAAK,CAACE,OAAN,CAAcK,OAAd,EAAhE,EAAyF,CAAzF,EAA4F,CAA5F,EAA+F,CAA/F,EAAkG,CAAlG,CAApB;AACA,UAAMyB,SAAS,GAAG,IAAI7B,IAAJ,CAASH,KAAK,CAACQ,OAAN,CAAcH,WAAd,EAAT,EAAsCL,KAAK,CAACQ,OAAN,CAAcF,QAAd,EAAtC,EAAgEN,KAAK,CAACQ,OAAN,CAAcD,OAAd,EAAhE,EAAyF,CAAzF,EAA4F,CAA5F,EAA+F,CAA/F,EAAkG,CAAlG,CAAlB;AAEA,UAAM0B,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAU,CAACH,SAAS,GAAGH,WAAb,IAA4B,QAAtC,CAAhB;AAEAO,IAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACH,GAPD;;AASA,QAAML,gBAAgB,GAAG,MAAM;AAC3B,UAAMK,OAAO,GAAG,CAACjC,KAAK,CAACQ,OAAN,CAAcH,WAAd,KAA8BL,KAAK,CAACE,OAAN,CAAcG,WAAd,EAA/B,IAA8D,EAA9D,IAAoEL,KAAK,CAACQ,OAAN,CAAcF,QAAd,KAA2BN,KAAK,CAACE,OAAN,CAAcI,QAAd,EAA/F,IAA2H,CAA3I;AAEA,QAAIgC,YAAY,GAAG,EAAnB;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIC,YAAY,GAAG,CAAnB;;AAEA,UAAMC,MAAM,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC5B,aAAO3C,KAAK,CAACU,MAAN,CAAa+B,MAAb,CAAoBG,EAAE,IAAKA,EAAE,CAACtB,SAAH,KAAiB,MAAjB,IAA2BsB,EAAE,CAACrB,SAAH,CAAalB,WAAb,OAA+BqC,IAA1D,IAAkEE,EAAE,CAACrB,SAAH,CAAajB,QAAb,OAA4BqC,KAAzH,CAAP;AACH,KAFD;;AAIA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,OAApB,EAA6BY,CAAC,EAA9B,EAAkC;AAC9B,UAAIH,IAAI,GAAG1C,KAAK,CAACE,OAAN,CAAcG,WAAd,EAAX;AACA,UAAIsC,KAAK,GAAG3C,KAAK,CAACE,OAAN,CAAcI,QAAd,KAA2BuC,CAAvC;;AACA,UAAIF,KAAK,IAAI,EAAb,EAAiB;AACbD,QAAAA,IAAI,IAAIR,IAAI,CAACY,KAAL,CAAWH,KAAK,GAAG,EAAnB,CAAR;AACAA,QAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;AACH;;AAED,YAAMtB,SAAS,GAAGoB,MAAM,CAACC,IAAD,EAAOC,KAAP,CAAxB;AACA,YAAMI,YAAY,GAAG1B,SAAS,CAAC2B,MAA/B;AACAV,MAAAA,YAAY,CAACW,IAAb,CAAkB;AAAEC,QAAAA,CAAC,EAAEL,CAAL;AAAQM,QAAAA,CAAC,EAAEJ;AAAX,OAAlB;AACAR,MAAAA,SAAS,CAACU,IAAV,CAAelC,SAAS,CAAC4B,KAAD,CAAT,GAAmB,MAAnB,GAA4BD,IAAI,CAACU,QAAL,EAA3C;AAEA,UAAIL,YAAY,GAAGP,YAAnB,EAAiCA,YAAY,GAAGO,YAAf;AACpC;;AAED9C,IAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWW,MAAAA,SAAS,EAAE2B,YAAtB;AAAoC1B,MAAAA,MAAM,EAAE2B,SAA5C;AAAuD1B,MAAAA,SAAS,EAAE2B,YAAY,GAAG;AAAjF,KAAD,CAAR;AACH,GA5BD;;AA8BA,sBACI,uDACA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAAN,CADA,eAEA,oBAAC,uBAAD;AAAyB,IAAA,KAAK,EAAE5C,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,sBAAD;AACI,IAAA,OAAO,EAAC,QADZ;AACqB,IAAA,IAAI,EAAE,KAD3B;AAEI,IAAA,KAAK,EAAC,iBAFV;AAGI,IAAA,KAAK,EAAEI,KAAK,CAACE,OAHjB;AAG0B,IAAA,MAAM,EAAC,kBAHjC;AAII,IAAA,QAAQ,EAAEc,aAJd;AAI6B,IAAA,aAAa,MAJ1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAOI,oBAAC,sBAAD;AACI,IAAA,OAAO,EAAC,QADZ;AACqB,IAAA,IAAI,EAAE,KAD3B;AAEI,IAAA,KAAK,EAAC,iBAFV;AAGI,IAAA,KAAK,EAAEhB,KAAK,CAACQ,OAHjB;AAG0B,IAAA,MAAM,EAAC,kBAHjC;AAII,IAAA,QAAQ,EAAEY,aAJd;AAI6B,IAAA,aAAa,MAJ1C;AAI2C,IAAA,OAAO,EAAEpB,KAAK,CAACE,OAJ1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CAFA,eAiBA,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,kBAAlB;AAAqC,IAAA,OAAO,EAAEsB,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAjBA,eAmBA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAN,CAnBA,eAqBJ,oBAAC,MAAD;AACI,IAAA,KAAK,EAAE,GADX;AACgB,IAAA,MAAM,EAAE,GADxB;AAC6B,IAAA,MAAM,EAAE;AAAE6B,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,MAAM,EAAE;AAApB,KADrC;AAEI,IAAA,OAAO,EAAE,CAAC,CAAD,EAAItD,KAAK,CAACa,SAAV,CAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIQ,oBAAC,KAAD;AACI,IAAA,KAAK,EAAE,SADX;AACsB,IAAA,GAAG,EAAE,IAD3B;AAEI,IAAA,SAAS,EAAEb,KAAK,CAACW,SAAN,CAAgBqC,MAF/B;AAEuC,IAAA,cAAc,EAAE,CAAC,EAFxD;AAGI,IAAA,UAAU,EAAEO,CAAC,IAAIvD,KAAK,CAACY,MAAN,CAAa2C,CAAb,CAHrB;AAII,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,IAAI,EAAE,SAAxB;AAAmCC,QAAAA,UAAU,EAAE;AAA/C,OAAR;AACEC,MAAAA,IAAI,EAAE;AAAEH,QAAAA,MAAM,EAAE;AAAV;AADR,KAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJR,eAWQ,oBAAC,KAAD;AACI,IAAA,KAAK,EAAE,UADX;AACuB,IAAA,GAAG,EAAE,IAD5B;AAEI,IAAA,SAAS,EAAEzD,KAAK,CAACa,SAFrB;AAGI,IAAA,KAAK,EAAE;AAAE2C,MAAAA,IAAI,EAAE;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,IAAI,EAAE,SAAxB;AAAmCC,QAAAA,UAAU,EAAE;AAA/C,OAAR;AACEC,MAAAA,IAAI,EAAE;AAAEH,QAAAA,MAAM,EAAE;AAAV;AADR,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXR,eAiBQ,oBAAC,cAAD;AACI,IAAA,SAAS,EAAC,QADd;AACuB,IAAA,IAAI,EAAEzD,KAAK,CAACW,SADnC;AAEI,IAAA,KAAK,EAAE;AAAEkD,MAAAA,WAAW,EAAE;AAAf,KAFX;AAGI,IAAA,SAAS,EAAE;AAAEJ,MAAAA,MAAM,EAAE;AAAV,KAHf;AAGsC,IAAA,SAAS,EAAE;AAAEA,MAAAA,MAAM,EAAE;AAAV,KAHjD;AAII,IAAA,gBAAgB,EAAEK,CAAC,IAAI7D,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWc,MAAAA,cAAc,EAAEgD;AAA3B,KAAD,CAJnC;AAKI,IAAA,eAAe,EAAEA,CAAC,IAAI7D,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWc,MAAAA,cAAc,EAAE;AAA3B,KAAD,CALlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBR,EAwBSd,KAAK,CAACc,cAAN,iBACD,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEd,KAAK,CAACc,cAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAH,OAA0Bd,KAAK,CAACY,MAAN,CAAaZ,KAAK,CAACc,cAAN,CAAqBoC,CAAlC,CAA1B,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAH,OAAoClD,KAAK,CAACc,cAAN,CAAqBqC,CAAzD,CAFJ,CADJ,CAzBR,CArBI,eAsDA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAN,CAtDA,eAyDA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAN,CAzDA,EA2DCf,OAAO,CAACC,GAAR,CAAYrC,KAAZ,CA3DD,CADJ;AA+DH;;AAED,eAAeD,UAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Text, Button, HintDiv } from '../../pages/Local/styles';\nimport { XYPlot, LineSeries, LineMarkSeries, XAxis, YAxis, Hint } from 'react-vis';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDateTimePicker } from '@material-ui/pickers';\nimport 'react-vis/dist/style.css';\n\nfunction Statistics() {\n    const [state, setState] = useState({minDate: new Date((new Date(Date.now())).getFullYear(), (new Date(Date.now())).getMonth(), (new Date(Date.now())).getDate(), 0, 0, 0, 0),\n                                        maxDate: new Date((new Date(Date.now())).getFullYear(), (new Date(Date.now())).getMonth(), (new Date(Date.now())).getDate(), 23, 59, 59, 999),\n                                        timeScale: \"hours\",\n                                        events: [],\n                                        firstData: [],\n                                        labels: [],\n                                        firstMaxY: 0,\n                                        overFirstGraph: false});\n\n    const monthName = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\n\n    const handleMinDate = (date: Date | null) => {\n        const timeDif = state.maxDate - date;\n        if (timeDif > 0) {\n            //setState({...state, minDate: date});\n            getData(date, state.maxDate);\n        }\n    }\n\n    const handleMaxDate = (date: Date | null) => {\n        const timeDif = date - state.minDate;\n        if (timeDif > 0) {\n            //setState({...state, maxDate: date});\n            getData(state.minDate, date);\n        }\n    }\n\n    const getData = (minDate, maxDate) => {\n        // Puxar dados do DB\n        const newEvents = [\n            {eventType: \"entry\",\n             createdAt: new Date(2020, 5, 2)},\n            {eventType: \"exit\",\n             createdAt: new Date(2020, 5, 2)},\n            {eventType: \"exit\",\n             createdAt: new Date(2020, 4, 30)},\n            {eventType: \"exit\",\n             createdAt: new Date(2020, 3, 30)},\n            {eventType: \"entry\",\n             createdAt: new Date(2020, 3, 30)},\n            {eventType: \"exit\",\n             createdAt: new Date(2020, 3, 15)},\n            {eventType: \"exit\",\n             createdAt: new Date(2020, 3, 7)},\n            {eventType: \"exit\",\n             createdAt: new Date(2020, 2, 10)},\n            {eventType: \"exit\",\n             createdAt: new Date(2020, 2, 14)},\n            {eventType: \"exit\",\n             createdAt: new Date(2020, 2, 20)},\n            {eventType: \"exit\",\n             createdAt: new Date(2020, 2, 2)}\n        ];\n\n        const timeDif = maxDate - minDate;\n        if (timeDif <= 7200000) setState({...state, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"minutes\"});\n        else if (timeDif <= 172800000) setState({...state, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"hours\"});\n        else if (timeDif <= 5259600000) setState({...state, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"days\"});\n        else setState({...state, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"months\"});\n    }\n\n    const handleUpdate = () => {\n        switch (state.timeScale) {\n            case \"minutes\": filterMinutesData(); break;\n            case \"hours\": filterHoursData(); break;\n            case \"days\": filterDaysData(); break;\n            case \"months\": filterMonthsData(); break;\n            default: break;\n        }\n    }\n\n    const filterMinutesData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), state.minDate.getMinutes(), 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), state.maxDate.getMinutes(), 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 600000);\n\n        console.log(periods);\n    }\n\n    const filterHoursData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), 0, 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), 1, 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 3600000);\n\n        console.log(periods);\n    }\n\n    const filterDaysData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), 0, 0, 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), 1, 0, 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 86400000);\n\n        console.log(periods);\n    }\n\n    const filterMonthsData = () => {\n        const periods = (state.maxDate.getFullYear() - state.minDate.getFullYear()) * 12 + (state.maxDate.getMonth() - state.minDate.getMonth()) + 1;\n\n        var newFirstData = [];\n        var newLabels = [];\n        var newFirstMaxY = 0;\n\n        const filter = (year, month) => {\n            return state.events.filter(el => (el.eventType === \"exit\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month));\n        }\n\n        for (var i = 0; i < periods; i++) {\n            var year = state.minDate.getFullYear();\n            var month = state.minDate.getMonth() + i;\n            if (month >= 12) {\n                year += Math.floor(month / 12);\n                month = month % 12;\n            }\n\n            const newEvents = filter(year, month);\n            const numberEvents = newEvents.length;\n            newFirstData.push({ x: i, y: numberEvents });\n            newLabels.push(monthName[month] + \" de \" + year.toString());\n\n            if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n        }\n\n        setState({...state, firstData: newFirstData, labels: newLabels, firstMaxY: newFirstMaxY + 1});\n    }\n\n    return (\n        <>\n        <Text><span>Selecionar período de visualização:</span></Text>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDateTimePicker \n                variant=\"inline\" ampm={false}\n                label=\"Limite inferior\"\n                value={state.minDate} format=\"dd/MM/yyyy HH:mm\"\n                onChange={handleMinDate} disableFuture\n            />\n            <KeyboardDateTimePicker \n                variant=\"inline\" ampm={false}\n                label=\"Limite superior\"\n                value={state.maxDate} format=\"dd/MM/yyyy HH:mm\"\n                onChange={handleMaxDate} disableFuture minDate={state.minDate}\n            />\n        </MuiPickersUtilsProvider>\n        \n        <Button className=\"upstatetatistics\" onClick={handleUpdate}>Atualizar</Button>\n\n        <Text><span>Gráficos</span></Text>\n\n    <XYPlot \n        width={400} height={400} margin={{ left: 80, bottom: 100 }}\n        yDomain={[0, state.firstMaxY]}\n    >\n            <XAxis \n                title={'Período'} on0={true}\n                tickTotal={state.firstData.length} tickLabelAngle={-45}\n                tickFormat={v => state.labels[v]}\n                style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                         line: { stroke: '#aaaaaa' } }}\n            />\n            <YAxis \n                title={'Clientes'} on0={true}\n                tickTotal={state.firstMaxY}\n                style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                         line: { stroke: '#aaaaaa' }}}\n            />\n            <LineMarkSeries \n                className=\"series\" data={state.firstData} \n                style={{ strokeWidth: '3px' }}\n                lineStyle={{ stroke: '#000066' }} markStyle={{ stroke: '#009999' }}\n                onValueMouseOver={d => setState({...state, overFirstGraph: d})}\n                onValueMouseOut={d => setState({...state, overFirstGraph: false})}\n            />\n            {state.overFirstGraph && \n            <Hint value={state.overFirstGraph}>\n                <HintDiv>\n                    <p><span>Período:</span> {state.labels[state.overFirstGraph.x]}</p>\n                    <p><span>Total de clientes:</span> {state.overFirstGraph.y}</p>\n                </HintDiv>\n            </Hint>}\n        </XYPlot>\n\n        <Text><span>Tabelas</span></Text>\n\n\n        <Text><span>Indicadores</span></Text>\n\n        {console.log(state)}\n        </>\n    );\n}\n\nexport default Statistics;"]},"metadata":{},"sourceType":"module"}