{"ast":null,"code":"var _jsxFileName = \"/home/italorennan/csc03FrontEnd/src/sections/Local/Statistics.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Section, Text, SubText, TextSection, Button, AllGraphSection, GraphSection, HintDiv, MainHeaderTableCell, SubHeaderTableCell, BodyTableCell, Title, StyledTablePagination } from '../../pages/Local/styles';\nimport { XYPlot, LineSeries, LineMarkSeries, XAxis, YAxis, Hint } from 'react-vis';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDateTimePicker } from '@material-ui/pickers';\nimport 'react-vis/dist/style.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Paper from '@material-ui/core/Paper';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nconst useRowStyles = makeStyles({\n  root: {\n    '& > *': {\n      borderBottom: 'unset'\n    }\n  }\n});\nconst useStyles = makeStyles({\n  root: {\n    width: '100%'\n  },\n  container: {\n    maxHeight: '100%'\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1\n  }\n});\n\nfunction Statistics() {\n  const [state, setState] = useState({\n    minDate: new Date(new Date(Date.now()).getFullYear(), new Date(Date.now()).getMonth(), new Date(Date.now()).getDate(), 0, 0, 0, 0),\n    maxDate: new Date(new Date(Date.now()).getFullYear(), new Date(Date.now()).getMonth(), new Date(Date.now()).getDate(), 23, 59, 59, 999),\n    clicked: false,\n    timeScale: \"hours\",\n    events: [],\n    firstData: [],\n    secondData: [],\n    labels: [],\n    firstMaxY: 0,\n    secondMaxY: 0,\n    overFirstGraph: false,\n    overSecondGraph: false,\n    graphsExplanation: false,\n    page: 0,\n    rowsPerPage: 10,\n    rows: [],\n    order: 'asc',\n    orderBy: 'quantity'\n  });\n  useEffect(() => {\n    if (!state.clicked) getData(state.minDate, state.maxDate);\n  });\n  const monthName = [\"Janeiro\", \"Fevereiro\", \"MarÃ§o\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\n  const classes = useStyles();\n\n  const handleMinDate = date => {\n    const timeDif = state.maxDate - date;\n    if (timeDif > 0) getData(date, state.maxDate);\n  };\n\n  const handleMaxDate = date => {\n    const timeDif = date - state.minDate;\n    if (timeDif > 0) getData(state.minDate, date);\n  };\n\n  const getData = (minDate, maxDate) => {\n    // Puxar dados do DB\n    const newEvents = [{\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 10)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 10, 30)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 10)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 11, 30)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 10)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 12, 30)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 10)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 13, 30)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 10)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 10, 20)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 11)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 11, 20)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 11)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 14, 20)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 12)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 13, 20)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 4, 30)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 3, 30)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 3, 30)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 3, 15)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 3, 7)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 10)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 14)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 20)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 2)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 14)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 14)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 14)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 13)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 15)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 15)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 16)\n    }];\n    const timeDif = maxDate - minDate;\n    if (timeDif < 7200000) setState({ ...state,\n      clicked: true,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"minutes\"\n    });else if (timeDif < 86400000) setState({ ...state,\n      clicked: true,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"hours\"\n    });else if (timeDif < 5259600000) setState({ ...state,\n      clicked: true,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"days\"\n    });else setState({ ...state,\n      clicked: true,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"months\"\n    });\n  };\n\n  const handleUpdate = () => {\n    switch (state.timeScale) {\n      case \"minutes\":\n        filterMinutesData();\n        break;\n\n      case \"hours\":\n        filterHoursData();\n        break;\n\n      case \"days\":\n        filterDaysData();\n        break;\n\n      case \"months\":\n        filterMonthsData();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const filterMinutesData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), state.minDate.getMinutes(), 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), state.maxDate.getMinutes(), 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 600000);\n    var newFirstData = [];\n    var newSecondData = [];\n    var newLabels = [];\n    var newFirstMaxY = 0;\n    var total = 0;\n\n    const filter = (value, year, month, day, hour, minute) => {\n      return state.events.filter(el => el.eventType === value && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month && el.createdAt.getDate() === day && el.createdAt.getHours() * 60 + el.createdAt.getMinutes() < hour * 60 + minute);\n    };\n\n    for (var i = 0; i < periods; i++) {\n      var year = state.minDate.getFullYear();\n      var month = state.minDate.getMonth();\n      var day = state.minDate.getDate();\n      var hour = state.minDate.getHours();\n      var minute = state.minDate.getMinutes() + 10 * i;\n      var date = new Date(year, month, day, hour, minute, 0, 0);\n      year = date.getFullYear();\n      month = date.getMonth();\n      day = date.getDate();\n      hour = date.getHours();\n      minute = date.getMinutes();\n      var minuteString = minute.toString();\n      if (minute < 10) minuteString = \"0\" + minuteString;\n      newLabels.push(hour.toString() + \":\" + minuteString);\n      const exits = filter(\"exit\", year, month, day, hour, minute);\n      minute += 10;\n\n      if (minute >= 60) {\n        hour += 1;\n        minute = minute % 60;\n      }\n\n      const entrys = filter(\"entry\", year, month, day, hour, minute);\n      const numberEvents = entrys.length - exits.length;\n      newFirstData.push({\n        x: i,\n        y: numberEvents\n      });\n      total = entrys.length;\n      newSecondData.push({\n        x: i,\n        y: total\n      });\n      if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n    }\n\n    setState({ ...state,\n      firstData: newFirstData,\n      secondData: newSecondData,\n      labels: newLabels,\n      firstMaxY: newFirstMaxY + 1,\n      secondMaxY: total + 1\n    });\n  };\n\n  const filterHoursData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), 0, 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), 1, 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 3600000);\n    var newFirstData = [];\n    var newSecondData = [];\n    var newLabels = [];\n    var newFirstMaxY = 0;\n    var total = 0;\n    var newRows = [];\n\n    const filter = (value, year, month, day, hour) => {\n      return state.events.filter(el => el.eventType === value && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month && el.createdAt.getDate() === day && el.createdAt.getHours() < hour);\n    };\n\n    for (var i = 0; i < periods; i++) {\n      var year = state.minDate.getFullYear();\n      var month = state.minDate.getMonth();\n      var day = state.minDate.getDate();\n      var hour = state.minDate.getHours() + i;\n      var date = new Date(year, month, day, hour, 0, 0, 0);\n      year = date.getFullYear();\n      month = date.getMonth();\n      day = date.getDate();\n      hour = date.getHours();\n      const exits = filter(\"exit\", year, month, day, hour);\n      const entrys = filter(\"entry\", year, month, day, hour + 1);\n      const numberEvents = entrys.length - exits.length;\n      newFirstData.push({\n        x: i,\n        y: numberEvents\n      });\n      const label = hour.toString() + \":00\";\n      newLabels.push(label);\n      newRows.push({\n        period: label,\n        quantity: numberEvents\n      });\n      total = entrys.length;\n      newSecondData.push({\n        x: i,\n        y: total\n      });\n      if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n    }\n\n    setState({ ...state,\n      firstData: newFirstData,\n      secondData: newSecondData,\n      labels: newLabels,\n      firstMaxY: newFirstMaxY + 1,\n      secondMaxY: total + 1,\n      rows: newRows\n    });\n  };\n\n  const filterDaysData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), 0, 0, 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), 1, 0, 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 86400000);\n    var newFirstData = [];\n    var newSecondData = [];\n    var newLabels = [];\n    var newFirstMaxY = 0;\n    var total = 0;\n\n    const filter = (year, month, day) => {\n      return state.events.filter(el => el.eventType === \"entry\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month && el.createdAt.getDate() === day);\n    };\n\n    for (var i = 0; i < periods; i++) {\n      var year = state.minDate.getFullYear();\n      var month = state.minDate.getMonth();\n      var day = state.minDate.getDate() + i;\n      var date = new Date(year, month, day);\n      year = date.getFullYear();\n      month = date.getMonth();\n      day = date.getDate();\n      const newEvents = filter(year, month, day);\n      const numberEvents = newEvents.length;\n      newFirstData.push({\n        x: i,\n        y: numberEvents\n      });\n      newLabels.push(day.toString() + \" de \" + monthName[month]);\n      total += numberEvents;\n      newSecondData.push({\n        x: i,\n        y: total\n      });\n      if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n    }\n\n    setState({ ...state,\n      firstData: newFirstData,\n      secondData: newSecondData,\n      labels: newLabels,\n      firstMaxY: newFirstMaxY + 1,\n      secondMaxY: total + 1\n    });\n  };\n\n  const filterMonthsData = () => {\n    const periods = (state.maxDate.getFullYear() - state.minDate.getFullYear()) * 12 + (state.maxDate.getMonth() - state.minDate.getMonth()) + 1;\n    var newFirstData = [];\n    var newSecondData = [];\n    var newLabels = [];\n    var newFirstMaxY = 0;\n    var total = 0;\n\n    const filter = (year, month) => {\n      return state.events.filter(el => el.eventType === \"entry\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month);\n    };\n\n    for (var i = 0; i < periods; i++) {\n      var year = state.minDate.getFullYear();\n      var month = state.minDate.getMonth() + i;\n\n      if (month >= 12) {\n        year += Math.floor(month / 12);\n        month = month % 12;\n      }\n\n      const newEvents = filter(year, month);\n      const numberEvents = newEvents.length;\n      newFirstData.push({\n        x: i,\n        y: numberEvents\n      });\n      newLabels.push(monthName[month] + \" de \" + year.toString());\n      total += numberEvents;\n      newSecondData.push({\n        x: i,\n        y: total\n      });\n      if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n    }\n\n    setState({ ...state,\n      firstData: newFirstData,\n      secondData: newSecondData,\n      labels: newLabels,\n      firstMaxY: newFirstMaxY + 1,\n      secondMaxY: total + 1\n    });\n  };\n\n  const columns = [{\n    id: 'period',\n    label: 'PerÃ­odo',\n    minWidth: 200,\n    align: 'center'\n  }, {\n    id: 'quantity',\n    label: 'Quantidade de clientes',\n    minWidth: 200,\n    align: 'center'\n  }];\n\n  const createSortHandler = property => event => {\n    const isAsc = state.orderBy === property && state.order === 'asc';\n    setState({ ...state,\n      order: isAsc ? 'desc' : 'asc',\n      orderBy: property\n    });\n  };\n\n  function descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) return -1;\n    if (b[orderBy] > a[orderBy]) return 1;\n    return 0;\n  }\n\n  function getComparator(order, orderBy) {\n    return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n  }\n\n  function stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n      const order = comparator(a[0], b[0]);\n      if (order !== 0) return order;\n      return a[1] - b[1];\n    });\n    return stabilizedThis.map(el => el[0]);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 15\n    }\n  }, \"Selecionar per\\xEDodo de visualiza\\xE7\\xE3o:\")), /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KeyboardDateTimePicker, {\n    variant: \"inline\",\n    ampm: false,\n    label: \"Limite inferior\",\n    value: state.minDate,\n    format: \"dd/MM/yyyy HH:mm\",\n    onChange: handleMinDate,\n    disableFuture: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(KeyboardDateTimePicker, {\n    variant: \"inline\",\n    ampm: false,\n    label: \"Limite superior\",\n    value: state.maxDate,\n    format: \"dd/MM/yyyy HH:mm\",\n    onChange: handleMaxDate,\n    disableFuture: true,\n    minDate: state.minDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: \"updateStatistics\",\n    onClick: handleUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }\n  }, \"Atualizar\"), /*#__PURE__*/React.createElement(Section, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 26\n    }\n  }, \"Gr\\xE1ficos\")), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setState({ ...state,\n        graphsExplanation: !state.graphsExplanation\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 13\n    }\n  }, \"?\")), state.graphsExplanation ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SubText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 11\n    }\n  }, \"O primeiro gr\\xE1fico mostra a quantidade de clientes em cada per\\xEDodo de tempo, enquanto o segundo mostra o acumulado dessa quantidade ao longo do tempo.\"), /*#__PURE__*/React.createElement(SubText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 9\n    }\n  }, \"O tamanho dos per\\xEDodos \\xE9 calculado automaticamente a partir do intervalo de visualiza\\xE7\\xE3o definido. Para intervalos de at\\xE9 2 horas, os per\\xEDodos s\\xE3o de 10 minutos; para at\\xE9 1 dia, s\\xE3o de 1 hora. Nesses casos, o primeiro gr\\xE1fico mostra a quantidade de clientes dentro da loja em cada momento. Para intervalos de at\\xE9 2 meses, os per\\xEDodos s\\xE3o de 1 dia; para intervalos maiores, s\\xE3o de 1 m\\xEAs. Nesses casos, o primeiro gr\\xE1fico mostra a quantidade de clientes que passaram pela loja no per\\xEDodo.\")) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(AllGraphSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GraphSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 17\n    }\n  }, \"Quantidade de clientes por per\\xEDodo\"), /*#__PURE__*/React.createElement(XYPlot, {\n    width: 550,\n    height: 400,\n    margin: {\n      left: 80,\n      bottom: 100\n    },\n    yDomain: [0, state.firstMaxY],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    title: 'PerÃ­odo',\n    on0: true,\n    tickTotal: state.firstData.length,\n    tickLabelAngle: -45,\n    tickFormat: v => state.labels[v],\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    title: 'Clientes',\n    on0: true,\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(LineMarkSeries, {\n    className: \"series\",\n    data: state.firstData,\n    style: {\n      strokeWidth: '3px'\n    },\n    size: 2,\n    lineStyle: {\n      stroke: '#000066'\n    },\n    markStyle: {\n      stroke: '#009999'\n    },\n    onValueMouseOver: d => setState({ ...state,\n      overFirstGraph: d\n    }),\n    onValueMouseOut: d => setState({ ...state,\n      overFirstGraph: false\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 21\n    }\n  }), state.overFirstGraph && /*#__PURE__*/React.createElement(Hint, {\n    value: state.overFirstGraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(HintDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 32\n    }\n  }, \"Per\\xEDodo:\"), \" \", state.labels[state.overFirstGraph.x]), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 32\n    }\n  }, \"Total de clientes:\"), \" \", state.overFirstGraph.y))))), /*#__PURE__*/React.createElement(GraphSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 17\n    }\n  }, \"Quantidade acumulada de clientes\"), /*#__PURE__*/React.createElement(XYPlot, {\n    width: 550,\n    height: 400,\n    margin: {\n      left: 80,\n      bottom: 100\n    },\n    yDomain: [0, state.secondMaxY],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    title: 'PerÃ­odo',\n    on0: true,\n    tickTotal: state.secondData.length,\n    tickLabelAngle: -45,\n    tickFormat: v => state.labels[v],\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    title: 'Clientes',\n    on0: true,\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(LineMarkSeries, {\n    className: \"series\",\n    data: state.secondData,\n    style: {\n      strokeWidth: '3px'\n    },\n    size: 2,\n    lineStyle: {\n      stroke: '#000066'\n    },\n    markStyle: {\n      stroke: '#009999'\n    },\n    onValueMouseOver: d => setState({ ...state,\n      overSecondGraph: d\n    }),\n    onValueMouseOut: d => setState({ ...state,\n      overSecondGraph: false\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 21\n    }\n  }), state.overSecondGraph && /*#__PURE__*/React.createElement(Hint, {\n    value: state.overSecondGraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(HintDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 32\n    }\n  }, \"Per\\xEDodo:\"), \" \", state.labels[state.overSecondGraph.x]), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 32\n    }\n  }, \"Total de clientes acumulado:\"), \" \", state.overSecondGraph.y)))))), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 15\n    }\n  }, \"Tabelas\")), /*#__PURE__*/React.createElement(TableContainer, {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(MainHeaderTableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 25\n    }\n  }), columns.map(column => /*#__PURE__*/React.createElement(MainHeaderTableCell, {\n    key: column.id,\n    align: column.align,\n    style: {\n      minWidth: column.minWidth\n    },\n    sortDirection: state.orderBy === column.id ? state.order : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TableSortLabel, {\n    active: state.orderBy === column.id,\n    direction: state.orderBy === column.id ? state.order : 'asc',\n    onClick: createSortHandler(column.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 33\n    }\n  }, column.label, state.orderBy === column.id ? /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.visuallyHidden,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 41\n    }\n  }, state.order === 'desc' ? 'sorted descending' : 'sorted ascending') : null))))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 17\n    }\n  }, stableSort(state.rows, getComparator(state.order, state.orderBy)).slice(state.page * state.rowsPerPage, (state.page + 1) * state.rowsPerPage).map(row => /*#__PURE__*/React.createElement(TableRow, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(BodyTableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 29\n    }\n  }), columns.map(column => /*#__PURE__*/React.createElement(BodyTableCell, {\n    align: column.align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 33\n    }\n  }, row[column.id]))))))), /*#__PURE__*/React.createElement(StyledTablePagination, {\n    rowsPerPageOptions: [10, 25, 50, 100],\n    labelRowsPerPage: \"Per\\xEDodos por p\\xE1gina:\",\n    labelDisplayedRows: ({\n      from,\n      to,\n      count\n    }) => `${from}-${to} de ${count}`,\n    component: \"div\",\n    count: state.rows.length,\n    rowsPerPage: state.rowsPerPage,\n    page: state.page,\n    onChangePage: (e, newPage) => {\n      setState({ ...state,\n        page: newPage\n      });\n    },\n    onChangeRowsPerPage: e => {\n      setState({ ...state,\n        rowsPerPage: e.target.value,\n        page: 0\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 9\n    }\n  }), console.log(state));\n}\n\nexport default Statistics;","map":{"version":3,"sources":["/home/italorennan/csc03FrontEnd/src/sections/Local/Statistics.js"],"names":["React","useState","useEffect","Section","Text","SubText","TextSection","Button","AllGraphSection","GraphSection","HintDiv","MainHeaderTableCell","SubHeaderTableCell","BodyTableCell","Title","StyledTablePagination","XYPlot","LineSeries","LineMarkSeries","XAxis","YAxis","Hint","DateFnsUtils","MuiPickersUtilsProvider","KeyboardDateTimePicker","makeStyles","Table","TableBody","TableContainer","TableHead","TableRow","TableSortLabel","Paper","KeyboardArrowDownIcon","KeyboardArrowUpIcon","useRowStyles","root","borderBottom","useStyles","width","container","maxHeight","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","Statistics","state","setState","minDate","Date","now","getFullYear","getMonth","getDate","maxDate","clicked","timeScale","events","firstData","secondData","labels","firstMaxY","secondMaxY","overFirstGraph","overSecondGraph","graphsExplanation","page","rowsPerPage","rows","order","orderBy","getData","monthName","classes","handleMinDate","date","timeDif","handleMaxDate","newEvents","eventType","createdAt","handleUpdate","filterMinutesData","filterHoursData","filterDaysData","filterMonthsData","initialData","getHours","getMinutes","finalData","periods","Math","ceil","newFirstData","newSecondData","newLabels","newFirstMaxY","total","filter","value","year","month","day","hour","minute","el","i","minuteString","toString","push","exits","entrys","numberEvents","length","x","y","newRows","label","period","quantity","floor","columns","id","minWidth","align","createSortHandler","property","event","isAsc","descendingComparator","a","b","getComparator","stableSort","array","comparator","stabilizedThis","map","index","sort","left","bottom","v","text","stroke","fill","fontWeight","line","strokeWidth","d","column","slice","row","from","to","count","e","newPage","target","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Section, Text, SubText, TextSection, Button, AllGraphSection, GraphSection, HintDiv, MainHeaderTableCell, SubHeaderTableCell, BodyTableCell, Title, StyledTablePagination } from '../../pages/Local/styles';\nimport { XYPlot, LineSeries, LineMarkSeries, XAxis, YAxis, Hint } from 'react-vis';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDateTimePicker } from '@material-ui/pickers';\nimport 'react-vis/dist/style.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Paper from '@material-ui/core/Paper';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\n\nconst useRowStyles = makeStyles({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n});\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n    },\n    container: {\n        maxHeight: '100%',\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    }\n});\n\nfunction Statistics() {\n    const [state, setState] = useState({minDate: new Date((new Date(Date.now())).getFullYear(), (new Date(Date.now())).getMonth(), (new Date(Date.now())).getDate(), 0, 0, 0, 0),\n                                        maxDate: new Date((new Date(Date.now())).getFullYear(), (new Date(Date.now())).getMonth(), (new Date(Date.now())).getDate(), 23, 59, 59, 999),\n                                        clicked: false,\n                                        timeScale: \"hours\",\n                                        events: [],\n                                        firstData: [],\n                                        secondData: [],\n                                        labels: [],\n                                        firstMaxY: 0,\n                                        secondMaxY: 0,\n                                        overFirstGraph: false,\n                                        overSecondGraph: false,\n                                        graphsExplanation: false,\n                                        page: 0,\n                                        rowsPerPage: 10,\n                                        rows: [],\n                                        order: 'asc',\n                                        orderBy: 'quantity'});\n\n    useEffect(() => {\n        if (!state.clicked) getData(state.minDate, state.maxDate);\n    });\n\n    const monthName = [\"Janeiro\", \"Fevereiro\", \"MarÃ§o\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\n    const classes = useStyles();\n\n    const handleMinDate = (date: Date | null) => {\n        const timeDif = state.maxDate - date;\n        if (timeDif > 0) getData(date, state.maxDate);\n    }\n\n    const handleMaxDate = (date: Date | null) => {\n        const timeDif = date - state.minDate;\n        if (timeDif > 0) getData(state.minDate, date);\n    }\n\n    const getData = (minDate, maxDate) => {\n        // Puxar dados do DB\n        const newEvents = [\n            {eventType: \"entry\", createdAt: new Date(2020, 5, 30, 10)},\n            {eventType: \"exit\", createdAt: new Date(2020, 5, 30, 10, 30)},\n            {eventType: \"entry\", createdAt: new Date(2020, 5, 30, 10)},\n            {eventType: \"exit\", createdAt: new Date(2020, 5, 30, 11, 30)},\n            {eventType: \"entry\", createdAt: new Date(2020, 5, 30, 10)},\n            {eventType: \"exit\", createdAt: new Date(2020, 5, 30, 12, 30)},\n            {eventType: \"entry\", createdAt: new Date(2020, 5, 30, 10)},\n            {eventType: \"exit\", createdAt: new Date(2020, 5, 30, 13, 30)},\n            {eventType: \"entry\", createdAt: new Date(2020, 5, 30, 10)},\n            {eventType: \"exit\", createdAt: new Date(2020, 5, 30, 10, 20)},\n            {eventType: \"entry\", createdAt: new Date(2020, 5, 30, 11)},\n            {eventType: \"exit\", createdAt: new Date(2020, 5, 30, 11, 20)},\n            {eventType: \"entry\", createdAt: new Date(2020, 5, 30, 11)},\n            {eventType: \"exit\", createdAt: new Date(2020, 5, 30, 14, 20)},\n            {eventType: \"entry\", createdAt: new Date(2020, 5, 30, 12)},\n            {eventType: \"exit\", createdAt: new Date(2020, 5, 30, 13, 20)},\n            {eventType: \"entry\", createdAt: new Date(2020, 4, 30)},\n            {eventType: \"exit\", createdAt: new Date(2020, 3, 30)},\n            {eventType: \"entry\", createdAt: new Date(2020, 3, 30)},\n            {eventType: \"exit\", createdAt: new Date(2020, 3, 15)},\n            {eventType: \"entry\", createdAt: new Date(2020, 3, 7)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 10)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 14)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 20)},\n            {eventType: \"exit\", createdAt: new Date(2020, 2, 2)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 14)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 14)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 14)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 13)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 15)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 15)},\n            {eventType: \"exit\", createdAt: new Date(2020, 2, 16)}\n        ];\n\n        const timeDif = maxDate - minDate;\n        if (timeDif < 7200000) setState({...state, clicked: true, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"minutes\"});\n        else if (timeDif < 86400000) setState({...state, clicked: true, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"hours\"});\n        else if (timeDif < 5259600000) setState({...state, clicked: true, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"days\"});\n        else setState({...state, clicked: true, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"months\"});\n    }\n\n    const handleUpdate = () => {\n        switch (state.timeScale) {\n            case \"minutes\": filterMinutesData(); break;\n            case \"hours\": filterHoursData(); break;\n            case \"days\": filterDaysData(); break;\n            case \"months\": filterMonthsData(); break;\n            default: break;\n        }\n    }\n\n    const filterMinutesData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), state.minDate.getMinutes(), 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), state.maxDate.getMinutes(), 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 600000);\n\n        var newFirstData = [];\n        var newSecondData = [];\n        var newLabels = [];\n        var newFirstMaxY = 0;\n        var total = 0;\n\n        const filter = (value, year, month, day, hour, minute) => {\n            return state.events.filter(el => (el.eventType === value && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month &&\n                                              el.createdAt.getDate() === day && (el.createdAt.getHours() * 60 + el.createdAt.getMinutes() < hour * 60 + minute)));\n        }\n\n        for (var i = 0; i < periods; i++) {\n            var year = state.minDate.getFullYear();\n            var month = state.minDate.getMonth();\n            var day = state.minDate.getDate();\n            var hour = state.minDate.getHours();\n            var minute = state.minDate.getMinutes() + 10 * i;\n            var date = new Date(year, month, day, hour, minute, 0, 0);\n            year = date.getFullYear();\n            month = date.getMonth();\n            day = date.getDate();\n            hour = date.getHours();\n            minute = date.getMinutes();\n\n            var minuteString = minute.toString();\n            if (minute < 10)\n                minuteString = \"0\" + minuteString;\n            newLabels.push(hour.toString() + \":\" + minuteString);\n\n            const exits = filter(\"exit\", year, month, day, hour, minute);\n            minute += 10;\n            if (minute >= 60) {\n                hour += 1;\n                minute = minute % 60;\n            }\n            const entrys = filter(\"entry\", year, month, day, hour, minute);\n            const numberEvents = entrys.length - exits.length;\n            newFirstData.push({ x: i, y: numberEvents });\n            \n            total = entrys.length;\n            newSecondData.push({ x: i, y: total });\n\n            if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n        }\n\n        setState({...state, firstData: newFirstData, secondData: newSecondData, labels: newLabels, firstMaxY: newFirstMaxY + 1, secondMaxY: total + 1});\n    }\n\n    const filterHoursData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), 0, 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), 1, 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 3600000);\n\n        var newFirstData = [];\n        var newSecondData = [];\n        var newLabels = [];\n        var newFirstMaxY = 0;\n        var total = 0;\n        var newRows = [];\n        \n        const filter = (value, year, month, day, hour) => {\n            return state.events.filter(el => (el.eventType === value && el.createdAt.getFullYear() === year &&\n                                              el.createdAt.getMonth() === month && el.createdAt.getDate() === day && el.createdAt.getHours() < hour));\n        }\n\n        for (var i = 0; i < periods; i++) {\n            var year = state.minDate.getFullYear();\n            var month = state.minDate.getMonth();\n            var day = state.minDate.getDate();\n            var hour = state.minDate.getHours() + i;\n            var date = new Date(year, month, day, hour, 0, 0, 0);\n            year = date.getFullYear();\n            month = date.getMonth();\n            day = date.getDate();\n            hour = date.getHours();\n\n            const exits = filter(\"exit\", year, month, day, hour);\n            const entrys = filter(\"entry\", year, month, day, hour + 1);\n            const numberEvents = entrys.length - exits.length;\n            newFirstData.push({ x: i, y: numberEvents });\n            const label = hour.toString() + \":00\";\n            newLabels.push(label);\n            newRows.push({ period: label, quantity: numberEvents });\n\n            total = entrys.length;\n            newSecondData.push({ x: i, y: total });\n\n            if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n        }\n\n        setState({...state, firstData: newFirstData, secondData: newSecondData, labels: newLabels, firstMaxY: newFirstMaxY + 1, secondMaxY: total + 1, rows: newRows});\n    }\n\n    const filterDaysData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), 0, 0, 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), 1, 0, 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 86400000);\n\n        var newFirstData = [];\n        var newSecondData = [];\n        var newLabels = [];\n        var newFirstMaxY = 0;\n        var total = 0;\n\n        const filter = (year, month, day) => {\n            return state.events.filter(el => (el.eventType === \"entry\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month && el.createdAt.getDate() === day));\n        }\n\n        for (var i = 0; i < periods; i++) {\n            var year = state.minDate.getFullYear();\n            var month = state.minDate.getMonth();\n            var day = state.minDate.getDate() + i;\n            var date = new Date(year, month, day);\n            year = date.getFullYear();\n            month = date.getMonth();\n            day = date.getDate();\n\n            const newEvents = filter(year, month, day);\n            const numberEvents = newEvents.length;\n            newFirstData.push({ x: i, y: numberEvents });\n            newLabels.push(day.toString() + \" de \" + monthName[month]);\n            \n            total += numberEvents;\n            newSecondData.push({ x: i, y: total });\n\n            if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n        }\n\n        setState({...state, firstData: newFirstData, secondData: newSecondData, labels: newLabels, firstMaxY: newFirstMaxY + 1, secondMaxY: total + 1});\n    }\n\n    const filterMonthsData = () => {\n        const periods = (state.maxDate.getFullYear() - state.minDate.getFullYear()) * 12 + (state.maxDate.getMonth() - state.minDate.getMonth()) + 1;\n\n        var newFirstData = [];\n        var newSecondData = [];\n        var newLabels = [];\n        var newFirstMaxY = 0;\n        var total = 0;\n\n        const filter = (year, month) => {\n            return state.events.filter(el => (el.eventType === \"entry\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month));\n        }\n\n        for (var i = 0; i < periods; i++) {\n            var year = state.minDate.getFullYear();\n            var month = state.minDate.getMonth() + i;\n            if (month >= 12) {\n                year += Math.floor(month / 12);\n                month = month % 12;\n            }\n\n            const newEvents = filter(year, month);\n            const numberEvents = newEvents.length;\n            newFirstData.push({ x: i, y: numberEvents });\n            newLabels.push(monthName[month] + \" de \" + year.toString());\n\n            total += numberEvents;\n            newSecondData.push({ x: i, y: total });\n\n            if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n        }\n\n        setState({...state, firstData: newFirstData, secondData: newSecondData, labels: newLabels, firstMaxY: newFirstMaxY + 1, secondMaxY: total + 1});\n    }\n\n    const columns = [\n        { id: 'period', label: 'PerÃ­odo', minWidth: 200, align: 'center'},\n        { id: 'quantity', label: 'Quantidade de clientes', minWidth: 200, align: 'center'}\n    ];\n\n    const createSortHandler = (property) => (event) => {\n        const isAsc = state.orderBy === property && state.order === 'asc';\n        setState({...state, order: (isAsc ? 'desc' : 'asc'), orderBy: property});\n    }\n\n    function descendingComparator(a, b, orderBy) {\n        if (b[orderBy] < a[orderBy]) \n            return -1;\n        if (b[orderBy] > a[orderBy])\n            return 1;\n        return 0;\n    }\n\n    function getComparator(order, orderBy) {\n        return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n    }\n\n    function stableSort(array, comparator) {\n        const stabilizedThis = array.map((el, index) => [el, index]);\n        stabilizedThis.sort((a, b) => {\n            const order = comparator(a[0], b[0]);\n            if (order !== 0) return order;\n            return a[1] - b[1];\n        });\n        return stabilizedThis.map((el) => el[0]);\n    }\n\n    return (\n        <>\n        <Text><span>Selecionar perÃ­odo de visualizaÃ§Ã£o:</span></Text>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDateTimePicker \n                variant=\"inline\" ampm={false}\n                label=\"Limite inferior\"\n                value={state.minDate} format=\"dd/MM/yyyy HH:mm\"\n                onChange={handleMinDate} disableFuture\n            />\n            <KeyboardDateTimePicker \n                variant=\"inline\" ampm={false}\n                label=\"Limite superior\"\n                value={state.maxDate} format=\"dd/MM/yyyy HH:mm\"\n                onChange={handleMaxDate} disableFuture minDate={state.minDate}\n            />\n        </MuiPickersUtilsProvider>\n        \n        <Button className=\"updateStatistics\" onClick={handleUpdate}>Atualizar</Button>\n\n        <Section>\n            <TextSection><span>GrÃ¡ficos</span></TextSection>\n            <button onClick={() => {setState({...state, graphsExplanation: !state.graphsExplanation})}}>?</button>\n        </Section>\n\n        {state.graphsExplanation ?\n        \n        <><SubText>O primeiro grÃ¡fico mostra a quantidade de clientes em cada perÃ­odo de tempo, enquanto o segundo mostra o acumulado dessa quantidade ao longo do tempo.</SubText>\n        <SubText>O tamanho dos perÃ­odos Ã© calculado automaticamente a partir do intervalo de visualizaÃ§Ã£o definido. Para intervalos de atÃ© 2 horas, os perÃ­odos sÃ£o de 10 minutos; para atÃ© 1 dia, sÃ£o de 1 hora. Nesses casos, o primeiro grÃ¡fico mostra a quantidade de clientes dentro da loja em cada momento. Para intervalos de atÃ© 2 meses, os perÃ­odos sÃ£o de 1 dia; para intervalos maiores, sÃ£o de 1 mÃªs. Nesses casos, o primeiro grÃ¡fico mostra a quantidade de clientes que passaram pela loja no perÃ­odo.</SubText></>\n    \n        : <></>}\n\n        <AllGraphSection>\n            <GraphSection>\n                <Text>Quantidade de clientes por perÃ­odo</Text>\n                <XYPlot\n                    width={550} height={400} margin={{ left: 80, bottom: 100 }}\n                    yDomain={[0, state.firstMaxY]}\n                >\n                    <XAxis \n                        title={'PerÃ­odo'} on0={true}\n                        tickTotal={state.firstData.length} tickLabelAngle={-45}\n                        tickFormat={v => state.labels[v]}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' } }}\n                    />\n                    <YAxis \n                        title={'Clientes'} on0={true}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' }}}\n                    />\n                    <LineMarkSeries \n                        className=\"series\" data={state.firstData} \n                        style={{ strokeWidth: '3px' }} size={2}\n                        lineStyle={{ stroke: '#000066' }} markStyle={{ stroke: '#009999' }}\n                        onValueMouseOver={d => setState({...state, overFirstGraph: d})}\n                        onValueMouseOut={d => setState({...state, overFirstGraph: false})}\n                    />\n                    {state.overFirstGraph && \n                    <Hint value={state.overFirstGraph}>\n                        <HintDiv>\n                            <p><span>PerÃ­odo:</span> {state.labels[state.overFirstGraph.x]}</p>\n                            <p><span>Total de clientes:</span> {state.overFirstGraph.y}</p>\n                        </HintDiv>\n                    </Hint>}\n                </XYPlot>\n            </GraphSection>\n\n            <GraphSection>\n                <Text>Quantidade acumulada de clientes</Text>\n                <XYPlot \n                    width={550} height={400} margin={{ left: 80, bottom: 100 }}\n                    yDomain={[0, state.secondMaxY]}\n                >\n                    <XAxis \n                        title={'PerÃ­odo'} on0={true}\n                        tickTotal={state.secondData.length} tickLabelAngle={-45}\n                        tickFormat={v => state.labels[v]}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' } }}\n                    />\n                    <YAxis \n                        title={'Clientes'} on0={true}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' }}}\n                    />\n                    <LineMarkSeries \n                        className=\"series\" data={state.secondData} \n                        style={{ strokeWidth: '3px' }} size={2}\n                        lineStyle={{ stroke: '#000066' }} markStyle={{ stroke: '#009999' }}\n                        onValueMouseOver={d => setState({...state, overSecondGraph: d})}\n                        onValueMouseOut={d => setState({...state, overSecondGraph: false})}\n                    />\n                    {state.overSecondGraph && \n                    <Hint value={state.overSecondGraph}>\n                        <HintDiv>\n                            <p><span>PerÃ­odo:</span> {state.labels[state.overSecondGraph.x]}</p>\n                            <p><span>Total de clientes acumulado:</span> {state.overSecondGraph.y}</p>\n                        </HintDiv>\n                    </Hint>}\n                </XYPlot>\n            </GraphSection>\n        </AllGraphSection>\n\n        <Text><span>Tabelas</span></Text>\n\n        <TableContainer className={classes.container}>\n            <Table stickyHeader aria-label=\"sticky table\">\n                <TableHead>\n                    <TableRow>\n                        <MainHeaderTableCell />\n                        {columns.map((column) => (\n                            <MainHeaderTableCell\n                                key={column.id}\n                                align={column.align}\n                                style={{ minWidth: column.minWidth }}\n                                sortDirection={state.orderBy === column.id ? state.order : false}\n                            >\n                                <TableSortLabel\n                                    active={state.orderBy === column.id}\n                                    direction={state.orderBy === column.id ? state.order : 'asc'}\n                                    onClick={createSortHandler(column.id)}\n                                >\n                                    {column.label}\n                                    {state.orderBy === column.id ? (\n                                        <span className={classes.visuallyHidden}>\n                                            {state.order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                        </span>\n                                    ) : null}\n                                </TableSortLabel>\n                            </MainHeaderTableCell>\n                        ))}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {stableSort(state.rows, getComparator(state.order, state.orderBy)).slice(state.page * state.rowsPerPage, (state.page + 1) * state.rowsPerPage).map((row) => (\n                        <TableRow className={classes.root}>\n                            <BodyTableCell />\n                            {columns.map((column) => (\n                                <BodyTableCell align={column.align}>{row[column.id]}</BodyTableCell>\n                            ))}\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n        <StyledTablePagination \n            rowsPerPageOptions={[10, 25, 50, 100]}\n            labelRowsPerPage=\"PerÃ­odos por pÃ¡gina:\"\n            labelDisplayedRows={({ from, to, count }) => `${from}-${to} de ${count}`}\n            component=\"div\"\n            count={state.rows.length}\n            rowsPerPage={state.rowsPerPage}\n            page={state.page}\n            onChangePage={(e, newPage) => {setState({...state, page: newPage})}}\n            onChangeRowsPerPage={e => {setState({...state, rowsPerPage: e.target.value, page: 0})}}\n        />\n\n        {console.log(state)}\n        </>\n    );\n}\n\nexport default Statistics;"]},"metadata":{},"sourceType":"module"}