{"ast":null,"code":"var _jsxFileName = \"/home/italorennan/csc03FrontEnd/src/sections/Local/Statistics.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Text, Button, AllGraphSection, GraphSection, HintDiv } from '../../pages/Local/styles';\nimport { XYPlot, LineSeries, LineMarkSeries, XAxis, YAxis, Hint } from 'react-vis';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDateTimePicker } from '@material-ui/pickers';\nimport 'react-vis/dist/style.css';\n\nfunction Statistics() {\n  const [state, setState] = useState({\n    minDate: new Date(new Date(Date.now()).getFullYear(), new Date(Date.now()).getMonth(), new Date(Date.now()).getDate(), 0, 0, 0, 0),\n    maxDate: new Date(new Date(Date.now()).getFullYear(), new Date(Date.now()).getMonth(), new Date(Date.now()).getDate(), 23, 59, 59, 999),\n    clicked: false,\n    timeScale: \"hours\",\n    events: [],\n    firstData: [],\n    secondData: [],\n    labels: [],\n    firstMaxY: 0,\n    secondMaxY: 0,\n    overFirstGraph: false,\n    overSecondGraph: false\n  });\n  useEffect(() => {\n    if (!state.clicked) getData(state.minDate, state.maxDate);\n  });\n  const monthName = [\"Janeiro\", \"Fevereiro\", \"MarÃ§o\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\n\n  const handleMinDate = date => {\n    const timeDif = state.maxDate - date;\n\n    if (timeDif > 0) {\n      //setState({...state, minDate: date});\n      getData(date, state.maxDate);\n    }\n  };\n\n  const handleMaxDate = date => {\n    const timeDif = date - state.minDate;\n\n    if (timeDif > 0) {\n      //setState({...state, maxDate: date});\n      getData(state.minDate, date);\n    }\n  };\n\n  const getData = (minDate, maxDate) => {\n    // Puxar dados do DB\n    const newEvents = [{\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 10)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 10, 30)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 10)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 11, 30)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 10)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 12, 30)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 10)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 13, 30)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 10)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 10, 20)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 11)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 11, 20)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 11)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 14, 20)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 12)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 13, 20)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 4, 30)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 3, 30)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 3, 30)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 3, 15)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 3, 7)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 10)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 14)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 20)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 2)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 14)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 14)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 14)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 13)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 15)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 15)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 16)\n    }];\n    const timeDif = maxDate - minDate;\n    if (timeDif <= 7200000) setState({ ...state,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"minutes\"\n    });else if (timeDif <= 172800000) setState({ ...state,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"hours\"\n    });else if (timeDif <= 5259600000) setState({ ...state,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"days\"\n    });else setState({ ...state,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"months\"\n    });\n  };\n\n  const handleUpdate = () => {\n    switch (state.timeScale) {\n      case \"minutes\":\n        filterMinutesData();\n        break;\n\n      case \"hours\":\n        filterHoursData();\n        break;\n\n      case \"days\":\n        filterDaysData();\n        break;\n\n      case \"months\":\n        filterMonthsData();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const filterMinutesData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), state.minDate.getMinutes(), 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), state.maxDate.getMinutes(), 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 600000);\n    console.log(periods);\n  };\n\n  const filterHoursData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), 0, 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), 1, 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 3600000);\n    var newFirstData = [];\n    var newSecondData = [];\n    var newLabels = [];\n    var newFirstMaxY = 0;\n    var total = 0;\n\n    const filter = (value, year, month, day, hour) => {\n      return state.events.filter(el => el.eventType === value && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month && el.createdAt.getDate() === day && el.createdAt.getHours() < hour);\n    };\n\n    for (var i = 0; i < periods; i++) {\n      var year = state.minDate.getFullYear();\n      var month = state.minDate.getMonth();\n      var day = state.minDate.getDate();\n      var hour = state.minDate.getHours() + i;\n      var date = new Date(year, month, day, hour, 0, 0, 0);\n      year = date.getFullYear();\n      month = date.getMonth();\n      day = date.getDate();\n      hour = date.getHours();\n      const exits = filter(\"exit\", year, month, day, hour);\n      const entrys = filter(\"entry\", year, month, day, hour + 1);\n      const numberEvents = entrys.length - exits.length;\n      newFirstData.push({\n        x: i,\n        y: numberEvents\n      });\n      newLabels.push(hour.toString() + \":00\");\n      total = entrys.length;\n      newSecondData.push({\n        x: i,\n        y: total\n      });\n      if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n      console.log(date);\n    }\n\n    setState({ ...state,\n      clicked: true,\n      firstData: newFirstData,\n      secondData: newSecondData,\n      labels: newLabels,\n      firstMaxY: newFirstMaxY + 1,\n      secondMaxY: total + 1\n    });\n  };\n\n  const filterDaysData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), 0, 0, 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), 1, 0, 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 86400000);\n    var newFirstData = [];\n    var newSecondData = [];\n    var newLabels = [];\n    var newFirstMaxY = 0;\n    var total = 0;\n\n    const filter = (year, month, day) => {\n      return state.events.filter(el => el.eventType === \"entry\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month && el.createdAt.getDate() === day);\n    };\n\n    for (var i = 0; i < periods; i++) {\n      var year = state.minDate.getFullYear();\n      var month = state.minDate.getMonth();\n      var day = state.minDate.getDate() + i;\n      var date = new Date(year, month, day);\n      year = date.getFullYear();\n      month = date.getMonth();\n      day = date.getDate();\n      const newEvents = filter(year, month, day);\n      const numberEvents = newEvents.length;\n      newFirstData.push({\n        x: i,\n        y: numberEvents\n      });\n      newLabels.push(day.toString() + \" de \" + monthName[month]);\n      total += numberEvents;\n      newSecondData.push({\n        x: i,\n        y: total\n      });\n      if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n    }\n\n    setState({ ...state,\n      clicked: true,\n      firstData: newFirstData,\n      secondData: newSecondData,\n      labels: newLabels,\n      firstMaxY: newFirstMaxY + 1,\n      secondMaxY: total + 1\n    });\n  };\n\n  const filterMonthsData = () => {\n    const periods = (state.maxDate.getFullYear() - state.minDate.getFullYear()) * 12 + (state.maxDate.getMonth() - state.minDate.getMonth()) + 1;\n    var newFirstData = [];\n    var newSecondData = [];\n    var newLabels = [];\n    var newFirstMaxY = 0;\n    var total = 0;\n\n    const filter = (year, month) => {\n      return state.events.filter(el => el.eventType === \"entry\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month);\n    };\n\n    for (var i = 0; i < periods; i++) {\n      var year = state.minDate.getFullYear();\n      var month = state.minDate.getMonth() + i;\n\n      if (month >= 12) {\n        year += Math.floor(month / 12);\n        month = month % 12;\n      }\n\n      const newEvents = filter(year, month);\n      const numberEvents = newEvents.length;\n      newFirstData.push({\n        x: i,\n        y: numberEvents\n      });\n      newLabels.push(monthName[month] + \" de \" + year.toString());\n      total += numberEvents;\n      newSecondData.push({\n        x: i,\n        y: total\n      });\n      if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n    }\n\n    setState({ ...state,\n      clicked: true,\n      firstData: newFirstData,\n      secondData: newSecondData,\n      labels: newLabels,\n      firstMaxY: newFirstMaxY + 1,\n      secondMaxY: total + 1\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 15\n    }\n  }, \"Selecionar per\\xEDodo de visualiza\\xE7\\xE3o:\")), /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KeyboardDateTimePicker, {\n    variant: \"inline\",\n    ampm: false,\n    label: \"Limite inferior\",\n    value: state.minDate,\n    format: \"dd/MM/yyyy HH:mm\",\n    onChange: handleMinDate,\n    disableFuture: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(KeyboardDateTimePicker, {\n    variant: \"inline\",\n    ampm: false,\n    label: \"Limite superior\",\n    value: state.maxDate,\n    format: \"dd/MM/yyyy HH:mm\",\n    onChange: handleMaxDate,\n    disableFuture: true,\n    minDate: state.minDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: \"updateStatistics\",\n    onClick: handleUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }\n  }, \"Atualizar\"), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 15\n    }\n  }, \"Gr\\xE1ficos\")), /*#__PURE__*/React.createElement(AllGraphSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GraphSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 17\n    }\n  }, \"Quantidade de clientes por per\\xEDodo\"), /*#__PURE__*/React.createElement(XYPlot, {\n    width: 550,\n    height: 400,\n    margin: {\n      left: 80,\n      bottom: 100\n    },\n    yDomain: [0, state.firstMaxY],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    title: 'PerÃ­odo',\n    on0: true,\n    tickTotal: state.firstData.length,\n    tickLabelAngle: -45,\n    tickFormat: v => state.labels[v],\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    title: 'Clientes',\n    on0: true,\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(LineMarkSeries, {\n    className: \"series\",\n    data: state.firstData,\n    style: {\n      strokeWidth: '3px'\n    },\n    size: 2,\n    lineStyle: {\n      stroke: '#000066'\n    },\n    markStyle: {\n      stroke: '#009999'\n    },\n    onValueMouseOver: d => setState({ ...state,\n      overFirstGraph: d\n    }),\n    onValueMouseOut: d => setState({ ...state,\n      overFirstGraph: false\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 21\n    }\n  }), state.overFirstGraph && /*#__PURE__*/React.createElement(Hint, {\n    value: state.overFirstGraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(HintDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 32\n    }\n  }, \"Per\\xEDodo:\"), \" \", state.labels[state.overFirstGraph.x]), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 32\n    }\n  }, \"Total de clientes:\"), \" \", state.overFirstGraph.y))))), /*#__PURE__*/React.createElement(GraphSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 17\n    }\n  }, \"Quantidade acumulada de clientes\"), /*#__PURE__*/React.createElement(XYPlot, {\n    width: 550,\n    height: 400,\n    margin: {\n      left: 80,\n      bottom: 100\n    },\n    yDomain: [0, state.secondMaxY],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    title: 'PerÃ­odo',\n    on0: true,\n    tickTotal: state.secondData.length,\n    tickLabelAngle: -45,\n    tickFormat: v => state.labels[v],\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    title: 'Clientes',\n    on0: true,\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(LineMarkSeries, {\n    className: \"series\",\n    data: state.secondData,\n    style: {\n      strokeWidth: '3px'\n    },\n    size: 2,\n    lineStyle: {\n      stroke: '#000066'\n    },\n    markStyle: {\n      stroke: '#009999'\n    },\n    onValueMouseOver: d => setState({ ...state,\n      overSecondGraph: d\n    }),\n    onValueMouseOut: d => setState({ ...state,\n      overSecondGraph: false\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 21\n    }\n  }), state.overSecondGraph && /*#__PURE__*/React.createElement(Hint, {\n    value: state.overSecondGraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(HintDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 32\n    }\n  }, \"Per\\xEDodo:\"), \" \", state.labels[state.overSecondGraph.x]), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 32\n    }\n  }, \"Total de clientes acumulado:\"), \" \", state.overSecondGraph.y)))))), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 15\n    }\n  }, \"Tabelas\")), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 15\n    }\n  }, \"Indicadores\")), console.log(state));\n}\n\nexport default Statistics;","map":{"version":3,"sources":["/home/italorennan/csc03FrontEnd/src/sections/Local/Statistics.js"],"names":["React","useState","useEffect","Text","Button","AllGraphSection","GraphSection","HintDiv","XYPlot","LineSeries","LineMarkSeries","XAxis","YAxis","Hint","DateFnsUtils","MuiPickersUtilsProvider","KeyboardDateTimePicker","Statistics","state","setState","minDate","Date","now","getFullYear","getMonth","getDate","maxDate","clicked","timeScale","events","firstData","secondData","labels","firstMaxY","secondMaxY","overFirstGraph","overSecondGraph","getData","monthName","handleMinDate","date","timeDif","handleMaxDate","newEvents","eventType","createdAt","handleUpdate","filterMinutesData","filterHoursData","filterDaysData","filterMonthsData","initialData","getHours","getMinutes","finalData","periods","Math","ceil","console","log","newFirstData","newSecondData","newLabels","newFirstMaxY","total","filter","value","year","month","day","hour","el","i","exits","entrys","numberEvents","length","push","x","y","toString","floor","left","bottom","v","text","stroke","fill","fontWeight","line","strokeWidth","d"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Text, Button, AllGraphSection, GraphSection, HintDiv } from '../../pages/Local/styles';\nimport { XYPlot, LineSeries, LineMarkSeries, XAxis, YAxis, Hint } from 'react-vis';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDateTimePicker } from '@material-ui/pickers';\nimport 'react-vis/dist/style.css';\n\nfunction Statistics() {\n    const [state, setState] = useState({minDate: new Date((new Date(Date.now())).getFullYear(), (new Date(Date.now())).getMonth(), (new Date(Date.now())).getDate(), 0, 0, 0, 0),\n                                        maxDate: new Date((new Date(Date.now())).getFullYear(), (new Date(Date.now())).getMonth(), (new Date(Date.now())).getDate(), 23, 59, 59, 999),\n                                        clicked: false,\n                                        timeScale: \"hours\",\n                                        events: [],\n                                        firstData: [],\n                                        secondData: [],\n                                        labels: [],\n                                        firstMaxY: 0,\n                                        secondMaxY: 0,\n                                        overFirstGraph: false,\n                                        overSecondGraph: false});\n\n    useEffect(() => {\n        if (!state.clicked) getData(state.minDate, state.maxDate);\n    });\n\n    const monthName = [\"Janeiro\", \"Fevereiro\", \"MarÃ§o\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\n\n    const handleMinDate = (date: Date | null) => {\n        const timeDif = state.maxDate - date;\n        if (timeDif > 0) {\n            //setState({...state, minDate: date});\n            getData(date, state.maxDate);\n        }\n    }\n\n    const handleMaxDate = (date: Date | null) => {\n        const timeDif = date - state.minDate;\n        if (timeDif > 0) {\n            //setState({...state, maxDate: date});\n            getData(state.minDate, date);\n        }\n    }\n\n    const getData = (minDate, maxDate) => {\n        // Puxar dados do DB\n        const newEvents = [\n            {eventType: \"entry\", createdAt: new Date(2020, 5, 30, 10)},\n            {eventType: \"exit\", createdAt: new Date(2020, 5, 30, 10, 30)},\n            {eventType: \"entry\", createdAt: new Date(2020, 5, 30, 10)},\n            {eventType: \"exit\", createdAt: new Date(2020, 5, 30, 11, 30)},\n            {eventType: \"entry\", createdAt: new Date(2020, 5, 30, 10)},\n            {eventType: \"exit\", createdAt: new Date(2020, 5, 30, 12, 30)},\n            {eventType: \"entry\", createdAt: new Date(2020, 5, 30, 10)},\n            {eventType: \"exit\", createdAt: new Date(2020, 5, 30, 13, 30)},\n            {eventType: \"entry\", createdAt: new Date(2020, 5, 30, 10)},\n            {eventType: \"exit\", createdAt: new Date(2020, 5, 30, 10, 20)},\n            {eventType: \"entry\", createdAt: new Date(2020, 5, 30, 11)},\n            {eventType: \"exit\", createdAt: new Date(2020, 5, 30, 11, 20)},\n            {eventType: \"entry\", createdAt: new Date(2020, 5, 30, 11)},\n            {eventType: \"exit\", createdAt: new Date(2020, 5, 30, 14, 20)},\n            {eventType: \"entry\", createdAt: new Date(2020, 5, 30, 12)},\n            {eventType: \"exit\", createdAt: new Date(2020, 5, 30, 13, 20)},\n            {eventType: \"entry\", createdAt: new Date(2020, 4, 30)},\n            {eventType: \"exit\", createdAt: new Date(2020, 3, 30)},\n            {eventType: \"entry\", createdAt: new Date(2020, 3, 30)},\n            {eventType: \"exit\", createdAt: new Date(2020, 3, 15)},\n            {eventType: \"entry\", createdAt: new Date(2020, 3, 7)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 10)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 14)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 20)},\n            {eventType: \"exit\", createdAt: new Date(2020, 2, 2)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 14)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 14)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 14)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 13)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 15)},\n            {eventType: \"entry\", createdAt: new Date(2020, 2, 15)},\n            {eventType: \"exit\", createdAt: new Date(2020, 2, 16)}\n        ];\n\n        const timeDif = maxDate - minDate;\n        if (timeDif <= 7200000) setState({...state, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"minutes\"});\n        else if (timeDif <= 172800000) setState({...state, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"hours\"});\n        else if (timeDif <= 5259600000) setState({...state, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"days\"});\n        else setState({...state, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"months\"});\n    }\n\n    const handleUpdate = () => {\n        switch (state.timeScale) {\n            case \"minutes\": filterMinutesData(); break;\n            case \"hours\": filterHoursData(); break;\n            case \"days\": filterDaysData(); break;\n            case \"months\": filterMonthsData(); break;\n            default: break;\n        }\n    }\n\n    const filterMinutesData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), state.minDate.getMinutes(), 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), state.maxDate.getMinutes(), 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 600000);\n\n        console.log(periods);\n    }\n\n    const filterHoursData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), 0, 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), 1, 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 3600000);\n\n        var newFirstData = [];\n        var newSecondData = [];\n        var newLabels = [];\n        var newFirstMaxY = 0;\n        var total = 0;\n        \n        const filter = (value, year, month, day, hour) => {\n            return state.events.filter(el => (el.eventType === value && el.createdAt.getFullYear() === year &&\n                                              el.createdAt.getMonth() === month && el.createdAt.getDate() === day && el.createdAt.getHours() < hour));\n        }\n\n        for (var i = 0; i < periods; i++) {\n            var year = state.minDate.getFullYear();\n            var month = state.minDate.getMonth();\n            var day = state.minDate.getDate();\n            var hour = state.minDate.getHours() + i;\n            var date = new Date(year, month, day, hour, 0, 0, 0);\n            year = date.getFullYear();\n            month = date.getMonth();\n            day = date.getDate();\n            hour = date.getHours();\n\n            const exits = filter(\"exit\", year, month, day, hour);\n            const entrys = filter(\"entry\", year, month, day, hour + 1);\n            const numberEvents = entrys.length - exits.length;\n            newFirstData.push({ x: i, y: numberEvents });\n            newLabels.push(hour.toString() + \":00\");\n\n            total = entrys.length;\n            newSecondData.push({ x: i, y: total });\n\n            if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n\n            console.log(date);\n        }\n\n        setState({...state, clicked: true, firstData: newFirstData, secondData: newSecondData, labels: newLabels, firstMaxY: newFirstMaxY + 1, secondMaxY: total + 1});\n    }\n\n    const filterDaysData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), 0, 0, 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), 1, 0, 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 86400000);\n\n        var newFirstData = [];\n        var newSecondData = [];\n        var newLabels = [];\n        var newFirstMaxY = 0;\n        var total = 0;\n\n        const filter = (year, month, day) => {\n            return state.events.filter(el => (el.eventType === \"entry\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month && el.createdAt.getDate() === day));\n        }\n\n        for (var i = 0; i < periods; i++) {\n            var year = state.minDate.getFullYear();\n            var month = state.minDate.getMonth();\n            var day = state.minDate.getDate() + i;\n            var date = new Date(year, month, day);\n            year = date.getFullYear();\n            month = date.getMonth();\n            day = date.getDate();\n\n            const newEvents = filter(year, month, day);\n            const numberEvents = newEvents.length;\n            newFirstData.push({ x: i, y: numberEvents });\n            newLabels.push(day.toString() + \" de \" + monthName[month]);\n            \n            total += numberEvents;\n            newSecondData.push({ x: i, y: total });\n\n            if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n        }\n\n        setState({...state, clicked: true, firstData: newFirstData, secondData: newSecondData, labels: newLabels, firstMaxY: newFirstMaxY + 1, secondMaxY: total + 1});\n    }\n\n    const filterMonthsData = () => {\n        const periods = (state.maxDate.getFullYear() - state.minDate.getFullYear()) * 12 + (state.maxDate.getMonth() - state.minDate.getMonth()) + 1;\n\n        var newFirstData = [];\n        var newSecondData = [];\n        var newLabels = [];\n        var newFirstMaxY = 0;\n        var total = 0;\n\n        const filter = (year, month) => {\n            return state.events.filter(el => (el.eventType === \"entry\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month));\n        }\n\n        for (var i = 0; i < periods; i++) {\n            var year = state.minDate.getFullYear();\n            var month = state.minDate.getMonth() + i;\n            if (month >= 12) {\n                year += Math.floor(month / 12);\n                month = month % 12;\n            }\n\n            const newEvents = filter(year, month);\n            const numberEvents = newEvents.length;\n            newFirstData.push({ x: i, y: numberEvents });\n            newLabels.push(monthName[month] + \" de \" + year.toString());\n\n            total += numberEvents;\n            newSecondData.push({ x: i, y: total });\n\n            if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n        }\n\n        setState({...state, clicked: true, firstData: newFirstData, secondData: newSecondData, labels: newLabels, firstMaxY: newFirstMaxY + 1, secondMaxY: total + 1});\n    }\n\n    return (\n        <>\n        <Text><span>Selecionar perÃ­odo de visualizaÃ§Ã£o:</span></Text>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDateTimePicker \n                variant=\"inline\" ampm={false}\n                label=\"Limite inferior\"\n                value={state.minDate} format=\"dd/MM/yyyy HH:mm\"\n                onChange={handleMinDate} disableFuture\n            />\n            <KeyboardDateTimePicker \n                variant=\"inline\" ampm={false}\n                label=\"Limite superior\"\n                value={state.maxDate} format=\"dd/MM/yyyy HH:mm\"\n                onChange={handleMaxDate} disableFuture minDate={state.minDate}\n            />\n        </MuiPickersUtilsProvider>\n        \n        <Button className=\"updateStatistics\" onClick={handleUpdate}>Atualizar</Button>\n\n        <Text><span>GrÃ¡ficos</span></Text>\n\n        <AllGraphSection>\n            <GraphSection>\n                <Text>Quantidade de clientes por perÃ­odo</Text>\n                <XYPlot\n                    width={550} height={400} margin={{ left: 80, bottom: 100 }}\n                    yDomain={[0, state.firstMaxY]}\n                >\n                    <XAxis \n                        title={'PerÃ­odo'} on0={true}\n                        tickTotal={state.firstData.length} tickLabelAngle={-45}\n                        tickFormat={v => state.labels[v]}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' } }}\n                    />\n                    <YAxis \n                        title={'Clientes'} on0={true}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' }}}\n                    />\n                    <LineMarkSeries \n                        className=\"series\" data={state.firstData} \n                        style={{ strokeWidth: '3px' }} size={2}\n                        lineStyle={{ stroke: '#000066' }} markStyle={{ stroke: '#009999' }}\n                        onValueMouseOver={d => setState({...state, overFirstGraph: d})}\n                        onValueMouseOut={d => setState({...state, overFirstGraph: false})}\n                    />\n                    {state.overFirstGraph && \n                    <Hint value={state.overFirstGraph}>\n                        <HintDiv>\n                            <p><span>PerÃ­odo:</span> {state.labels[state.overFirstGraph.x]}</p>\n                            <p><span>Total de clientes:</span> {state.overFirstGraph.y}</p>\n                        </HintDiv>\n                    </Hint>}\n                </XYPlot>\n            </GraphSection>\n\n            <GraphSection>\n                <Text>Quantidade acumulada de clientes</Text>\n                <XYPlot \n                    width={550} height={400} margin={{ left: 80, bottom: 100 }}\n                    yDomain={[0, state.secondMaxY]}\n                >\n                    <XAxis \n                        title={'PerÃ­odo'} on0={true}\n                        tickTotal={state.secondData.length} tickLabelAngle={-45}\n                        tickFormat={v => state.labels[v]}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' } }}\n                    />\n                    <YAxis \n                        title={'Clientes'} on0={true}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' }}}\n                    />\n                    <LineMarkSeries \n                        className=\"series\" data={state.secondData} \n                        style={{ strokeWidth: '3px' }} size={2}\n                        lineStyle={{ stroke: '#000066' }} markStyle={{ stroke: '#009999' }}\n                        onValueMouseOver={d => setState({...state, overSecondGraph: d})}\n                        onValueMouseOut={d => setState({...state, overSecondGraph: false})}\n                    />\n                    {state.overSecondGraph && \n                    <Hint value={state.overSecondGraph}>\n                        <HintDiv>\n                            <p><span>PerÃ­odo:</span> {state.labels[state.overSecondGraph.x]}</p>\n                            <p><span>Total de clientes acumulado:</span> {state.overSecondGraph.y}</p>\n                        </HintDiv>\n                    </Hint>}\n                </XYPlot>\n            </GraphSection>\n        </AllGraphSection>\n\n        <Text><span>Tabelas</span></Text>\n\n\n        <Text><span>Indicadores</span></Text>\n\n        {console.log(state)}\n        </>\n    );\n}\n\nexport default Statistics;"]},"metadata":{},"sourceType":"module"}