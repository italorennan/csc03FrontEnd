{"ast":null,"code":"var _jsxFileName = \"/home/italorennan/csc03FrontEnd/src/sections/Local/Statistics.js\";\nimport React, { useState } from 'react';\nimport { Text, Button, AllGraphSection, GraphSection, HintDiv } from '../../pages/Local/styles';\nimport { XYPlot, LineSeries, LineMarkSeries, XAxis, YAxis, Hint } from 'react-vis';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDateTimePicker } from '@material-ui/pickers';\nimport 'react-vis/dist/style.css';\n\nfunction Statistics() {\n  const [state, setState] = useState({\n    minDate: new Date(new Date(Date.now()).getFullYear(), new Date(Date.now()).getMonth(), new Date(Date.now()).getDate(), 0, 0, 0, 0),\n    maxDate: new Date(new Date(Date.now()).getFullYear(), new Date(Date.now()).getMonth(), new Date(Date.now()).getDate(), 23, 59, 59, 999),\n    timeScale: \"hours\",\n    events: [],\n    firstData: [],\n    secondData: [],\n    labels: [],\n    firstMaxY: 0,\n    secondMaxY: 0,\n    overFirstGraph: false,\n    overSecondGraph: false\n  });\n  const monthName = [\"Janeiro\", \"Fevereiro\", \"MarÃ§o\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\n\n  const handleMinDate = date => {\n    const timeDif = state.maxDate - date;\n\n    if (timeDif > 0) {\n      //setState({...state, minDate: date});\n      getData(date, state.maxDate);\n    }\n  };\n\n  const handleMaxDate = date => {\n    const timeDif = date - state.minDate;\n\n    if (timeDif > 0) {\n      //setState({...state, maxDate: date});\n      getData(state.minDate, date);\n    }\n  };\n\n  const getData = (minDate, maxDate) => {\n    // Puxar dados do DB\n    const newEvents = [{\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 2)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 2)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 4, 30)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 3, 30)\n    }, {\n      eventType: \"entry\",\n      createdAt: new Date(2020, 3, 30)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 3, 15)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 3, 7)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 10)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 14)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 20)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 2)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 14)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 14)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 14)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 13)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 15)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 15)\n    }, {\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 16)\n    }];\n    const timeDif = maxDate - minDate;\n    if (timeDif <= 7200000) setState({ ...state,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"minutes\"\n    });else if (timeDif <= 172800000) setState({ ...state,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"hours\"\n    });else if (timeDif <= 5259600000) setState({ ...state,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"days\"\n    });else setState({ ...state,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"months\"\n    });\n  };\n\n  const handleUpdate = () => {\n    switch (state.timeScale) {\n      case \"minutes\":\n        filterMinutesData();\n        break;\n\n      case \"hours\":\n        filterHoursData();\n        break;\n\n      case \"days\":\n        filterDaysData();\n        break;\n\n      case \"months\":\n        filterMonthsData();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const filterMinutesData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), state.minDate.getMinutes(), 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), state.maxDate.getMinutes(), 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 600000);\n    console.log(periods);\n  };\n\n  const filterHoursData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), 0, 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), 1, 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 3600000);\n    console.log(periods);\n  };\n\n  const filterDaysData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), 0, 0, 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), 1, 0, 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 86400000);\n    var newFirstData = [];\n    var newSecondData = [];\n    var newLabels = [];\n    var newFirstMaxY = 0;\n    var total = 0;\n\n    const filter = (year, month, day) => {\n      return state.events.filter(el => el.eventType === \"exit\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month && el.createdAt.getDate() === day);\n    };\n\n    for (var i = 0; i < periods; i++) {\n      var year = state.minDate.getFullYear();\n      var month = state.minDate.getMonth();\n      var day = state.minDate.getDate() + i;\n      var date = new Date(year, month, day);\n      year = date.getFullYear();\n      month = date.getMonth();\n      day = date.getDate();\n      const newEvents = filter(year, month, day);\n      const numberEvents = newEvents.length;\n      newFirstData.push({\n        x: i,\n        y: numberEvents\n      });\n      newLabels.push(day.toString() + \" de \" + monthName[month]);\n      total += numberEvents;\n      newSecondData.push({\n        x: i,\n        y: total\n      });\n      if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n    }\n\n    setState({ ...state,\n      firstData: newFirstData,\n      secondData: newSecondData,\n      labels: newLabels,\n      firstMaxY: newFirstMaxY + 1,\n      secondMaxY: total + 1\n    });\n  };\n\n  const filterMonthsData = () => {\n    const periods = (state.maxDate.getFullYear() - state.minDate.getFullYear()) * 12 + (state.maxDate.getMonth() - state.minDate.getMonth()) + 1;\n    var newFirstData = [];\n    var newSecondData = [];\n    var newLabels = [];\n    var newFirstMaxY = 0;\n    var total = 0;\n\n    const filter = (year, month) => {\n      return state.events.filter(el => el.eventType === \"exit\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month);\n    };\n\n    for (var i = 0; i < periods; i++) {\n      var year = state.minDate.getFullYear();\n      var month = state.minDate.getMonth() + i;\n\n      if (month >= 12) {\n        year += Math.floor(month / 12);\n        month = month % 12;\n      }\n\n      const newEvents = filter(year, month);\n      const numberEvents = newEvents.length;\n      newFirstData.push({\n        x: i,\n        y: numberEvents\n      });\n      newLabels.push(monthName[month] + \" de \" + year.toString());\n      total += numberEvents;\n      newSecondData.push({\n        x: i,\n        y: total\n      });\n      if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n    }\n\n    setState({ ...state,\n      firstData: newFirstData,\n      secondData: newSecondData,\n      labels: newLabels,\n      firstMaxY: newFirstMaxY + 1,\n      secondMaxY: total + 1\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  }, \"Selecionar per\\xEDodo de visualiza\\xE7\\xE3o:\")), /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KeyboardDateTimePicker, {\n    variant: \"inline\",\n    ampm: false,\n    label: \"Limite inferior\",\n    value: state.minDate,\n    format: \"dd/MM/yyyy HH:mm\",\n    onChange: handleMinDate,\n    disableFuture: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(KeyboardDateTimePicker, {\n    variant: \"inline\",\n    ampm: false,\n    label: \"Limite superior\",\n    value: state.maxDate,\n    format: \"dd/MM/yyyy HH:mm\",\n    onChange: handleMaxDate,\n    disableFuture: true,\n    minDate: state.minDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: \"upstatetatistics\",\n    onClick: handleUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, \"Atualizar\"), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 15\n    }\n  }, \"Gr\\xE1ficos\")), /*#__PURE__*/React.createElement(AllGraphSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GraphSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }, \"Quantidade de clientes por per\\xEDodo\"), /*#__PURE__*/React.createElement(XYPlot, {\n    width: 550,\n    height: 400,\n    margin: {\n      left: 80,\n      bottom: 100\n    },\n    yDomain: [0, state.firstMaxY],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    title: 'PerÃ­odo',\n    on0: true,\n    tickTotal: state.firstData.length,\n    tickLabelAngle: -45,\n    tickFormat: v => state.labels[v],\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    title: 'Clientes',\n    on0: true,\n    tickTotal: state.firstMaxY,\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(LineMark, {\n    className: \"series\",\n    data: state.firstData,\n    style: {\n      strokeWidth: '3px'\n    },\n    lineStyle: {\n      stroke: '#000066'\n    } //markStyle={{ stroke: '#009999' }}\n    ,\n    onValueMouseOver: d => setState({ ...state,\n      overFirstGraph: d\n    }),\n    onValueMouseOut: d => setState({ ...state,\n      overFirstGraph: false\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 21\n    }\n  }), state.overFirstGraph && /*#__PURE__*/React.createElement(Hint, {\n    value: state.overFirstGraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(HintDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 32\n    }\n  }, \"Per\\xEDodo:\"), \" \", state.labels[state.overFirstGraph.x]), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 32\n    }\n  }, \"Total de clientes:\"), \" \", state.overFirstGraph.y))))), /*#__PURE__*/React.createElement(GraphSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 17\n    }\n  }, \"Quantidade acumulada de clientes\"), /*#__PURE__*/React.createElement(XYPlot, {\n    width: 550,\n    height: 400,\n    margin: {\n      left: 80,\n      bottom: 100\n    },\n    yDomain: [0, state.secondMaxY],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    title: 'PerÃ­odo',\n    on0: true,\n    tickTotal: state.secondData.length,\n    tickLabelAngle: -45,\n    tickFormat: v => state.labels[v],\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    title: 'Clientes',\n    on0: true,\n    tickTotal: state.secondMaxY,\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(LineMarkSeries, {\n    className: \"series\",\n    data: state.secondData,\n    style: {\n      strokeWidth: '3px'\n    },\n    lineStyle: {\n      stroke: '#000066'\n    },\n    markStyle: {\n      stroke: '#009999'\n    },\n    onValueMouseOver: d => setState({ ...state,\n      overSecondGraph: d\n    }),\n    onValueMouseOut: d => setState({ ...state,\n      overSecondGraph: false\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 21\n    }\n  }), state.overSecondGraph && /*#__PURE__*/React.createElement(Hint, {\n    value: state.overSecondGraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(HintDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 32\n    }\n  }, \"Per\\xEDodo:\"), \" \", state.labels[state.overSecondGraph.x]), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 32\n    }\n  }, \"Total de clientes acumulado:\"), \" \", state.overSecondGraph.y)))))), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 15\n    }\n  }, \"Tabelas\")), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 15\n    }\n  }, \"Indicadores\")), console.log(state));\n}\n\nexport default Statistics;","map":{"version":3,"sources":["/home/italorennan/csc03FrontEnd/src/sections/Local/Statistics.js"],"names":["React","useState","Text","Button","AllGraphSection","GraphSection","HintDiv","XYPlot","LineSeries","LineMarkSeries","XAxis","YAxis","Hint","DateFnsUtils","MuiPickersUtilsProvider","KeyboardDateTimePicker","Statistics","state","setState","minDate","Date","now","getFullYear","getMonth","getDate","maxDate","timeScale","events","firstData","secondData","labels","firstMaxY","secondMaxY","overFirstGraph","overSecondGraph","monthName","handleMinDate","date","timeDif","getData","handleMaxDate","newEvents","eventType","createdAt","handleUpdate","filterMinutesData","filterHoursData","filterDaysData","filterMonthsData","initialData","getHours","getMinutes","finalData","periods","Math","ceil","console","log","newFirstData","newSecondData","newLabels","newFirstMaxY","total","filter","year","month","day","el","i","numberEvents","length","push","x","y","toString","floor","left","bottom","v","text","stroke","fill","fontWeight","line","strokeWidth","d"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Text, Button, AllGraphSection, GraphSection, HintDiv } from '../../pages/Local/styles';\nimport { XYPlot, LineSeries, LineMarkSeries, XAxis, YAxis, Hint } from 'react-vis';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDateTimePicker } from '@material-ui/pickers';\nimport 'react-vis/dist/style.css';\n\nfunction Statistics() {\n    const [state, setState] = useState({minDate: new Date((new Date(Date.now())).getFullYear(), (new Date(Date.now())).getMonth(), (new Date(Date.now())).getDate(), 0, 0, 0, 0),\n                                        maxDate: new Date((new Date(Date.now())).getFullYear(), (new Date(Date.now())).getMonth(), (new Date(Date.now())).getDate(), 23, 59, 59, 999),\n                                        timeScale: \"hours\",\n                                        events: [],\n                                        firstData: [],\n                                        secondData: [],\n                                        labels: [],\n                                        firstMaxY: 0,\n                                        secondMaxY: 0,\n                                        overFirstGraph: false,\n                                        overSecondGraph: false});\n\n    const monthName = [\"Janeiro\", \"Fevereiro\", \"MarÃ§o\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\n\n    const handleMinDate = (date: Date | null) => {\n        const timeDif = state.maxDate - date;\n        if (timeDif > 0) {\n            //setState({...state, minDate: date});\n            getData(date, state.maxDate);\n        }\n    }\n\n    const handleMaxDate = (date: Date | null) => {\n        const timeDif = date - state.minDate;\n        if (timeDif > 0) {\n            //setState({...state, maxDate: date});\n            getData(state.minDate, date);\n        }\n    }\n\n    const getData = (minDate, maxDate) => {\n        // Puxar dados do DB\n        const newEvents = [\n            {eventType: \"entry\", createdAt: new Date(2020, 5, 2)},\n            {eventType: \"exit\", createdAt: new Date(2020, 5, 2)},\n            {eventType: \"exit\", createdAt: new Date(2020, 4, 30)},\n            {eventType: \"exit\", createdAt: new Date(2020, 3, 30)},\n            {eventType: \"entry\", createdAt: new Date(2020, 3, 30)},\n            {eventType: \"exit\", createdAt: new Date(2020, 3, 15)},\n            {eventType: \"exit\", createdAt: new Date(2020, 3, 7)},\n            {eventType: \"exit\", createdAt: new Date(2020, 2, 10)},\n            {eventType: \"exit\", createdAt: new Date(2020, 2, 14)},\n            {eventType: \"exit\", createdAt: new Date(2020, 2, 20)},\n            {eventType: \"exit\", createdAt: new Date(2020, 2, 2)},\n            {eventType: \"exit\", createdAt: new Date(2020, 2, 14)},\n            {eventType: \"exit\", createdAt: new Date(2020, 2, 14)},\n            {eventType: \"exit\", createdAt: new Date(2020, 2, 14)},\n            {eventType: \"exit\", createdAt: new Date(2020, 2, 13)},\n            {eventType: \"exit\", createdAt: new Date(2020, 2, 15)},\n            {eventType: \"exit\", createdAt: new Date(2020, 2, 15)},\n            {eventType: \"exit\", createdAt: new Date(2020, 2, 16)}\n        ];\n\n        const timeDif = maxDate - minDate;\n        if (timeDif <= 7200000) setState({...state, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"minutes\"});\n        else if (timeDif <= 172800000) setState({...state, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"hours\"});\n        else if (timeDif <= 5259600000) setState({...state, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"days\"});\n        else setState({...state, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"months\"});\n    }\n\n    const handleUpdate = () => {\n        switch (state.timeScale) {\n            case \"minutes\": filterMinutesData(); break;\n            case \"hours\": filterHoursData(); break;\n            case \"days\": filterDaysData(); break;\n            case \"months\": filterMonthsData(); break;\n            default: break;\n        }\n    }\n\n    const filterMinutesData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), state.minDate.getMinutes(), 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), state.maxDate.getMinutes(), 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 600000);\n\n        console.log(periods);\n    }\n\n    const filterHoursData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), 0, 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), 1, 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 3600000);\n\n        console.log(periods);\n    }\n\n    const filterDaysData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), 0, 0, 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), 1, 0, 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 86400000);\n\n        var newFirstData = [];\n        var newSecondData = [];\n        var newLabels = [];\n        var newFirstMaxY = 0;\n        var total = 0;\n\n        const filter = (year, month, day) => {\n            return state.events.filter(el => (el.eventType === \"exit\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month && el.createdAt.getDate() === day));\n        }\n\n        for (var i = 0; i < periods; i++) {\n            var year = state.minDate.getFullYear();\n            var month = state.minDate.getMonth();\n            var day = state.minDate.getDate() + i;\n            var date = new Date(year, month, day);\n            year = date.getFullYear();\n            month = date.getMonth();\n            day = date.getDate();\n\n            const newEvents = filter(year, month, day);\n            const numberEvents = newEvents.length;\n            newFirstData.push({ x: i, y: numberEvents });\n            newLabels.push(day.toString() + \" de \" + monthName[month]);\n            \n            total += numberEvents;\n            newSecondData.push({ x: i, y: total });\n\n            if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n        }\n\n        setState({...state, firstData: newFirstData, secondData: newSecondData, labels: newLabels, firstMaxY: newFirstMaxY + 1, secondMaxY: total + 1});\n    }\n\n    const filterMonthsData = () => {\n        const periods = (state.maxDate.getFullYear() - state.minDate.getFullYear()) * 12 + (state.maxDate.getMonth() - state.minDate.getMonth()) + 1;\n\n        var newFirstData = [];\n        var newSecondData = [];\n        var newLabels = [];\n        var newFirstMaxY = 0;\n        var total = 0;\n\n        const filter = (year, month) => {\n            return state.events.filter(el => (el.eventType === \"exit\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month));\n        }\n\n        for (var i = 0; i < periods; i++) {\n            var year = state.minDate.getFullYear();\n            var month = state.minDate.getMonth() + i;\n            if (month >= 12) {\n                year += Math.floor(month / 12);\n                month = month % 12;\n            }\n\n            const newEvents = filter(year, month);\n            const numberEvents = newEvents.length;\n            newFirstData.push({ x: i, y: numberEvents });\n            newLabels.push(monthName[month] + \" de \" + year.toString());\n\n            total += numberEvents;\n            newSecondData.push({ x: i, y: total });\n\n            if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n        }\n\n        setState({...state, firstData: newFirstData, secondData: newSecondData, labels: newLabels, firstMaxY: newFirstMaxY + 1, secondMaxY: total + 1});\n    }\n\n    return (\n        <>\n        <Text><span>Selecionar perÃ­odo de visualizaÃ§Ã£o:</span></Text>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDateTimePicker \n                variant=\"inline\" ampm={false}\n                label=\"Limite inferior\"\n                value={state.minDate} format=\"dd/MM/yyyy HH:mm\"\n                onChange={handleMinDate} disableFuture\n            />\n            <KeyboardDateTimePicker \n                variant=\"inline\" ampm={false}\n                label=\"Limite superior\"\n                value={state.maxDate} format=\"dd/MM/yyyy HH:mm\"\n                onChange={handleMaxDate} disableFuture minDate={state.minDate}\n            />\n        </MuiPickersUtilsProvider>\n        \n        <Button className=\"upstatetatistics\" onClick={handleUpdate}>Atualizar</Button>\n\n        <Text><span>GrÃ¡ficos</span></Text>\n\n        <AllGraphSection>\n            <GraphSection>\n                <Text>Quantidade de clientes por perÃ­odo</Text>\n                <XYPlot\n                    width={550} height={400} margin={{ left: 80, bottom: 100 }}\n                    yDomain={[0, state.firstMaxY]}\n                >\n                    <XAxis \n                        title={'PerÃ­odo'} on0={true}\n                        tickTotal={state.firstData.length} tickLabelAngle={-45}\n                        tickFormat={v => state.labels[v]}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' } }}\n                    />\n                    <YAxis \n                        title={'Clientes'} on0={true}\n                        tickTotal={state.firstMaxY}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' }}}\n                    />\n                    <LineMark\n                        className=\"series\" data={state.firstData} \n                        style={{ strokeWidth: '3px' }}\n                        lineStyle={{ stroke: '#000066' }} //markStyle={{ stroke: '#009999' }}\n                        onValueMouseOver={d => setState({...state, overFirstGraph: d})}\n                        onValueMouseOut={d => setState({...state, overFirstGraph: false})}\n                    />\n                    {state.overFirstGraph && \n                    <Hint value={state.overFirstGraph}>\n                        <HintDiv>\n                            <p><span>PerÃ­odo:</span> {state.labels[state.overFirstGraph.x]}</p>\n                            <p><span>Total de clientes:</span> {state.overFirstGraph.y}</p>\n                        </HintDiv>\n                    </Hint>}\n                </XYPlot>\n            </GraphSection>\n\n            <GraphSection>\n                <Text>Quantidade acumulada de clientes</Text>\n                <XYPlot \n                    width={550} height={400} margin={{ left: 80, bottom: 100 }}\n                    yDomain={[0, state.secondMaxY]}\n                >\n                    <XAxis \n                        title={'PerÃ­odo'} on0={true}\n                        tickTotal={state.secondData.length} tickLabelAngle={-45}\n                        tickFormat={v => state.labels[v]}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' } }}\n                    />\n                    <YAxis \n                        title={'Clientes'} on0={true}\n                        tickTotal={state.secondMaxY}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' }}}\n                    />\n                    <LineMarkSeries \n                        className=\"series\" data={state.secondData} \n                        style={{ strokeWidth: '3px' }}\n                        lineStyle={{ stroke: '#000066' }} markStyle={{ stroke: '#009999' }}\n                        onValueMouseOver={d => setState({...state, overSecondGraph: d})}\n                        onValueMouseOut={d => setState({...state, overSecondGraph: false})}\n                    />\n                    {state.overSecondGraph && \n                    <Hint value={state.overSecondGraph}>\n                        <HintDiv>\n                            <p><span>PerÃ­odo:</span> {state.labels[state.overSecondGraph.x]}</p>\n                            <p><span>Total de clientes acumulado:</span> {state.overSecondGraph.y}</p>\n                        </HintDiv>\n                    </Hint>}\n                </XYPlot>\n            </GraphSection>\n        </AllGraphSection>\n\n        <Text><span>Tabelas</span></Text>\n\n\n        <Text><span>Indicadores</span></Text>\n\n        {console.log(state)}\n        </>\n    );\n}\n\nexport default Statistics;"]},"metadata":{},"sourceType":"module"}