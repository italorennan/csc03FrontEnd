{"ast":null,"code":"var _jsxFileName = \"/home/italorennan/csc03FrontEnd/src/sections/Local/Statistics.js\";\nimport React, { useState } from 'react';\nimport { Text } from '../../pages/Local/styles';\nimport { XYPlot, LineSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis } from 'react-vis';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDateTimePicker } from '@material-ui/pickers';\n\nfunction Statistics() {\n  const [state, setState] = useState({\n    minDate: new Date(new Date(Date.now()).getFullYear(), new Date(Date.now()).getMonth(), new Date(Date.now()).getDate(), 0, 0, 0, 0),\n    maxDate: new Date(new Date(Date.now()).getFullYear(), new Date(Date.now()).getMonth(), new Date(Date.now()).getDate(), 23, 59, 59, 999),\n    timeScale: \"hours\",\n    data: []\n  });\n  const data = [{\n    x: 0,\n    y: 8\n  }, {\n    x: 1,\n    y: 5\n  }, {\n    x: 2,\n    y: 4\n  }, {\n    x: 3,\n    y: 9\n  }, {\n    x: 4,\n    y: 1\n  }, {\n    x: 5,\n    y: 7\n  }, {\n    x: 6,\n    y: 6\n  }, {\n    x: 7,\n    y: 3\n  }, {\n    x: 8,\n    y: 2\n  }, {\n    x: 9,\n    y: 5\n  }];\n\n  const handleMinDate = date => {\n    const timeDif = state.maxDate - date;\n\n    if (timeDif > 0) {\n      if (timeDif <= 7200000) setState({ ...state,\n        minDate: date,\n        timeScale: \"minutes\"\n      });else if (timeDif <= 172800000) setState({ ...state,\n        minDate: date,\n        timeScale: \"hours\"\n      });else if (timeDif <= 5259600000) setState({ ...state,\n        minDate: date,\n        timeScale: \"days\"\n      });else setState({ ...state,\n        minDate: date,\n        timeScale: \"months\"\n      });\n      getData(date, state.maxDate);\n    }\n  };\n\n  const handleMaxDate = date => {\n    const timeDif = date - state.minDate;\n\n    if (timeDif > 0) {\n      if (timeDif <= 7200000) setState({ ...state,\n        maxDate: date,\n        timeScale: \"minutes\"\n      });else if (timeDif <= 172800000) setState({ ...state,\n        maxDate: date,\n        timeScale: \"hours\"\n      });else if (timeDif <= 5259600000) setState({ ...state,\n        maxDate: date,\n        timeScale: \"days\"\n      });else setState({ ...state,\n        maxDate: date,\n        timeScale: \"months\"\n      });\n      getData(state.minDate, date);\n    }\n  };\n\n  const getData = (minDate, maxDate) => {\n    // Puxar dados do DB\n    switch (state.timeScale) {\n      case \"minutes\":\n        filterMinutesData(minDate, maxDate);\n        break;\n\n      case \"hours\":\n        filterHoursData(minDate, maxDate);\n        break;\n\n      case \"days\":\n        filterDaysData(minDate, maxDate);\n        break;\n\n      case \"months\":\n        filterMonthsData(minDate, maxDate);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const filterMinutesData = (minDate, maxDate) => {\n    const initialData = new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), minDate.getHours(), minDate.getMinutes(), 0, 0);\n    const finalData = new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), maxDate.getHours(), maxDate.getMinutes(), 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 600000);\n    console.log(periods);\n  };\n\n  const filterHoursData = (minDate, maxDate) => {};\n\n  const filterDaysData = (minDate, maxDate) => {};\n\n  const filterMonthsData = (minDate, maxDate) => {\n    const periods = (maxDate.getFullYear() - minDate.getFullYear()) * 12 + (maxDate.getMonth() - minDate.getMonth()) + 1;\n    console.log(periods);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, \"Selecionar per\\xEDodo de visualiza\\xE7\\xE3o:\")), /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KeyboardDateTimePicker, {\n    variant: \"inline\",\n    ampm: false,\n    label: \"Limite inferior\",\n    value: state.minDate,\n    format: \"dd/MM/yyyy HH:mm\",\n    onChange: handleMinDate,\n    disableFuture: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(KeyboardDateTimePicker, {\n    variant: \"inline\",\n    ampm: false,\n    label: \"Limite superior\",\n    value: state.maxDate,\n    format: \"dd/MM/yyyy HH:mm\",\n    onChange: handleMaxDate,\n    disableFuture: true,\n    minDate: state.minDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }\n  }, \"Gr\\xE1ficos\")), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  }, \"Tabelas\")), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }, \"Indicadores\")), /*#__PURE__*/React.createElement(XYPlot, {\n    width: 300,\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LineSeries, {\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(VerticalGridLines, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(HorizontalGridLines, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  })), console.log(state));\n}\n\nexport default Statistics;","map":{"version":3,"sources":["/home/italorennan/csc03FrontEnd/src/sections/Local/Statistics.js"],"names":["React","useState","Text","XYPlot","LineSeries","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","DateFnsUtils","MuiPickersUtilsProvider","KeyboardDateTimePicker","Statistics","state","setState","minDate","Date","now","getFullYear","getMonth","getDate","maxDate","timeScale","data","x","y","handleMinDate","date","timeDif","getData","handleMaxDate","filterMinutesData","filterHoursData","filterDaysData","filterMonthsData","initialData","getHours","getMinutes","finalData","periods","Math","ceil","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Text } from '../../pages/Local/styles';\nimport { XYPlot, LineSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis } from 'react-vis';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDateTimePicker } from '@material-ui/pickers';\n\nfunction Statistics() {\n    const [state, setState] = useState({minDate: new Date((new Date(Date.now())).getFullYear(), (new Date(Date.now())).getMonth(), (new Date(Date.now())).getDate(), 0, 0, 0, 0),\n                                        maxDate: new Date((new Date(Date.now())).getFullYear(), (new Date(Date.now())).getMonth(), (new Date(Date.now())).getDate(), 23, 59, 59, 999),\n                                        timeScale: \"hours\",\n                                        data: []});\n\n    const data = [\n        {x: 0, y: 8},\n        {x: 1, y: 5},\n        {x: 2, y: 4},\n        {x: 3, y: 9},\n        {x: 4, y: 1},\n        {x: 5, y: 7},\n        {x: 6, y: 6},\n        {x: 7, y: 3},\n        {x: 8, y: 2},\n        {x: 9, y: 5}\n    ];\n\n    const handleMinDate = (date: Date | null) => {\n        const timeDif = state.maxDate - date;\n        if (timeDif > 0) {\n            if (timeDif <= 7200000) setState({...state, minDate: date, timeScale: \"minutes\"});\n            else if (timeDif <= 172800000) setState({...state, minDate: date, timeScale: \"hours\"});\n            else if (timeDif <= 5259600000) setState({...state, minDate: date, timeScale: \"days\"});\n            else setState({...state, minDate: date, timeScale: \"months\"});\n            getData(date, state.maxDate);\n        }\n    }\n\n    const handleMaxDate = (date: Date | null) => {\n        const timeDif = date - state.minDate;\n        if (timeDif > 0) {\n            if (timeDif <= 7200000) setState({...state, maxDate: date, timeScale: \"minutes\"});\n            else if (timeDif <= 172800000) setState({...state, maxDate: date, timeScale: \"hours\"});\n            else if (timeDif <= 5259600000) setState({...state, maxDate: date, timeScale: \"days\"});\n            else setState({...state, maxDate: date, timeScale: \"months\"});\n            getData(state.minDate, date);\n        }\n    }\n\n    const getData = (minDate, maxDate) => {\n        // Puxar dados do DB\n\n        switch (state.timeScale) {\n            case \"minutes\": filterMinutesData(minDate, maxDate); break;\n            case \"hours\": filterHoursData(minDate, maxDate); break;\n            case \"days\": filterDaysData(minDate, maxDate); break;\n            case \"months\": filterMonthsData(minDate, maxDate); break;\n            default: break;\n        }\n    }\n\n    const filterMinutesData = (minDate, maxDate) => {\n        const initialData = new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), minDate.getHours(), minDate.getMinutes(), 0, 0);\n        const finalData = new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), maxDate.getHours(), maxDate.getMinutes(), 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 600000);\n\n        console.log(periods);\n    }\n\n    const filterHoursData = (minDate, maxDate) => {\n\n    }\n\n    const filterDaysData = (minDate, maxDate) => {\n\n    }\n\n    const filterMonthsData = (minDate, maxDate) => {\n        const periods = (maxDate.getFullYear() - minDate.getFullYear()) * 12 + (maxDate.getMonth() - minDate.getMonth()) + 1;\n\n        console.log(periods);\n    }\n\n    return (\n        <>\n        <Text><span>Selecionar período de visualização:</span></Text>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDateTimePicker \n                variant=\"inline\" ampm={false}\n                label=\"Limite inferior\"\n                value={state.minDate} format=\"dd/MM/yyyy HH:mm\"\n                onChange={handleMinDate} disableFuture\n            />\n            <KeyboardDateTimePicker \n                variant=\"inline\" ampm={false}\n                label=\"Limite superior\"\n                value={state.maxDate} format=\"dd/MM/yyyy HH:mm\"\n                onChange={handleMaxDate} disableFuture minDate={state.minDate}\n            />\n        </MuiPickersUtilsProvider>\n\n        <Text><span>Gráficos</span></Text>\n\n\n        <Text><span>Tabelas</span></Text>\n\n\n        <Text><span>Indicadores</span></Text>\n\n        <XYPlot width={300} height={300}>\n            <LineSeries data={data} />\n            <VerticalGridLines />\n            <HorizontalGridLines />\n            <XAxis />\n            <YAxis />\n        </XYPlot>\n        {console.log(state)}\n        </>\n    );\n}\n\nexport default Statistics;"]},"metadata":{},"sourceType":"module"}