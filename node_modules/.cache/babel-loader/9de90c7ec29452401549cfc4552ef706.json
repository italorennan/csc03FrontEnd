{"ast":null,"code":"var _jsxFileName = \"/home/italorennan/csc03FrontEnd/src/sections/Global/Statistics.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Section, Text, SubText, TextSection, Button, AllGraphSection, GraphSection, HintDiv, MainHeaderTableCell, BodyTableCell, StyledTablePagination } from '../../pages/Global/styles';\nimport { XYPlot, LineMarkSeries, XAxis, YAxis, Hint } from 'react-vis';\nimport DiscreteColorLegend from 'react-vis/dist/legends/discrete-color-legend';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDateTimePicker } from '@material-ui/pickers';\nimport 'react-vis/dist/style.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nconst useRowStyles = makeStyles({\n  root: {\n    '& > *': {\n      borderBottom: 'unset'\n    }\n  }\n});\nconst useStyles = makeStyles({\n  root: {\n    width: '100%'\n  },\n  container: {\n    maxHeight: '100%'\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1\n  }\n});\n\nfunction Statistics() {\n  // Puxar do DB\n  const store1 = {\n    storeName: \"Loja Fortaleza\",\n    storeNumber: 8001,\n    accessCode: \"temp\",\n    index: 0\n  };\n  const store2 = {\n    storeName: \"Loja São Paulo\",\n    storeNumber: 8002,\n    accessCode: \"temp\",\n    index: 1\n  };\n  const storesData = [store1, store2];\n  const lineColors = ['#000066', '#cc0066', '#cc0000', '#b266ff', '#33ff99'];\n  var legendItems = [];\n  storesData.map(store => {\n    legendItems.push({\n      title: store.storeName,\n      color: lineColors[store.index]\n    });\n  });\n  const [state, setState] = useState({\n    minDate: new Date(new Date(Date.now()).getFullYear(), new Date(Date.now()).getMonth(), new Date(Date.now()).getDate(), 0, 0, 0, 0),\n    maxDate: new Date(new Date(Date.now()).getFullYear(), new Date(Date.now()).getMonth(), new Date(Date.now()).getDate(), 23, 59, 59, 999),\n    clicked: false,\n    timeScale: 'hours',\n    storesData: storesData,\n    storesQuantity: storesData.length,\n    events: [],\n    firstGeneralData: [],\n    secondGeneralData: [],\n    firstPerStoreData: [],\n    secondPerStoreData: [],\n    labels: [],\n    firstMaxY: 0,\n    secondMaxY: 0,\n    overFirstGeneralGraph: false,\n    overSecondGeneralGraph: false,\n    overFirstPerStoreGraph: false,\n    overSecondPerStoreGraph: false,\n    graphsExplanation: false,\n    tablesExplanation: false,\n    page: 0,\n    rowsPerPage: 10,\n    rows: [],\n    order: 'asc',\n    orderBy: 'quantity'\n  });\n  useEffect(() => {\n    if (!state.clicked) getData(state.minDate, state.maxDate);\n  });\n  const monthName = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\n  const classes = useStyles();\n\n  const handleMinDate = date => {\n    const timeDif = state.maxDate - date;\n    if (timeDif > 0) getData(date, state.maxDate);\n  };\n\n  const handleMaxDate = date => {\n    const timeDif = date - state.minDate;\n    if (timeDif > 0) getData(state.minDate, date);\n  };\n\n  const getData = (minDate, maxDate) => {\n    // Puxar dados do DB\n    // Usar variável state.storeSelected\n    const newEvents = [{\n      storeNumber: 8001,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 10)\n    }, {\n      storeNumber: 8001,\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 10, 30)\n    }, {\n      storeNumber: 8001,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 10)\n    }, {\n      storeNumber: 8001,\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 11, 30)\n    }, {\n      storeNumber: 8002,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 10)\n    }, {\n      storeNumber: 8002,\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 12, 30)\n    }, {\n      storeNumber: 8002,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 10)\n    }, {\n      storeNumber: 8002,\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 13, 30)\n    }, {\n      storeNumber: 8002,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 10)\n    }, {\n      storeNumber: 8002,\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 10, 20)\n    }, {\n      storeNumber: 8002,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 11)\n    }, {\n      storeNumber: 8002,\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 11, 20)\n    }, {\n      storeNumber: 8002,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 11)\n    }, {\n      storeNumber: 8002,\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 14, 20)\n    }, {\n      storeNumber: 8002,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 5, 30, 12)\n    }, {\n      storeNumber: 8002,\n      eventType: \"exit\",\n      createdAt: new Date(2020, 5, 30, 13, 20)\n    }, {\n      storeNumber: 8001,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 4, 30)\n    }, {\n      storeNumber: 8001,\n      eventType: \"exit\",\n      createdAt: new Date(2020, 3, 30)\n    }, {\n      storeNumber: 8001,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 3, 30)\n    }, {\n      storeNumber: 8001,\n      eventType: \"exit\",\n      createdAt: new Date(2020, 3, 15)\n    }, {\n      storeNumber: 8001,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 3, 7)\n    }, {\n      storeNumber: 8001,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 10)\n    }, {\n      storeNumber: 8001,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 14)\n    }, {\n      storeNumber: 8002,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 20)\n    }, {\n      storeNumber: 8002,\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 2)\n    }, {\n      storeNumber: 8002,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 14)\n    }, {\n      storeNumber: 8002,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 14)\n    }, {\n      storeNumber: 8002,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 14)\n    }, {\n      storeNumber: 8002,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 13)\n    }, {\n      storeNumber: 8002,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 15)\n    }, {\n      storeNumber: 8002,\n      eventType: \"entry\",\n      createdAt: new Date(2020, 2, 15)\n    }, {\n      storeNumber: 8002,\n      eventType: \"exit\",\n      createdAt: new Date(2020, 2, 16)\n    }];\n    const timeDif = maxDate - minDate;\n    if (timeDif < 7200000) setState({ ...state,\n      clicked: true,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"minutes\"\n    });else if (timeDif < 86400000) setState({ ...state,\n      clicked: true,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"hours\"\n    });else if (timeDif < 5259600000) setState({ ...state,\n      clicked: true,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"days\"\n    });else setState({ ...state,\n      clicked: true,\n      minDate: minDate,\n      maxDate: maxDate,\n      events: newEvents,\n      timeScale: \"months\"\n    });\n  };\n\n  const handleUpdate = () => {\n    switch (state.timeScale) {\n      case \"minutes\":\n        filterMinutesData();\n        break;\n\n      case \"hours\":\n        filterHoursData();\n        break;\n\n      case \"days\":\n        filterDaysData();\n        break;\n\n      case \"months\":\n        filterMonthsData();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const filterMinutesData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), state.minDate.getMinutes(), 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), state.maxDate.getMinutes(), 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 600000);\n    var newFirstGeneralData = [];\n    var newSecondGeneralData = [];\n    var newLabels = [];\n    var newFirstMaxY = 0;\n    var total = 0;\n    var newRows = [];\n\n    const filter = (value, year, month, day, hour, minute) => {\n      return state.events.filter(el => el.eventType === value && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month && el.createdAt.getDate() === day && el.createdAt.getHours() * 60 + el.createdAt.getMinutes() < hour * 60 + minute);\n    };\n\n    for (var i = 0; i < periods; i++) {\n      var year = state.minDate.getFullYear();\n      var month = state.minDate.getMonth();\n      var day = state.minDate.getDate();\n      var hour = state.minDate.getHours();\n      var minute = state.minDate.getMinutes() + 10 * i;\n      var date = new Date(year, month, day, hour, minute, 0, 0);\n      year = date.getFullYear();\n      month = date.getMonth();\n      day = date.getDate();\n      hour = date.getHours();\n      minute = date.getMinutes();\n      var minuteString = minute.toString();\n      if (minute < 10) minuteString = \"0\" + minuteString;\n      var hourString = hour.toString();\n      if (hour < 10) hourString = \"0\" + hourString;\n      const label = hourString + \":\" + minuteString;\n      newLabels.push(label);\n      const exits = filter(\"exit\", year, month, day, hour, minute);\n      minute += 10;\n\n      if (minute >= 60) {\n        hour += 1;\n        minute = minute % 60;\n      }\n\n      const entrys = filter(\"entry\", year, month, day, hour, minute);\n      const numberEvents = entrys.length - exits.length;\n      newFirstGeneralData.push({\n        x: i,\n        y: numberEvents\n      });\n      newRows.push({\n        period: label,\n        quantity: numberEvents\n      });\n      total = entrys.length;\n      newSecondGeneralData.push({\n        x: i,\n        y: total\n      });\n      if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n    }\n\n    setState({ ...state,\n      firstGeneralData: newFirstGeneralData,\n      secondGeneralData: newSecondGeneralData,\n      labels: newLabels,\n      firstMaxY: newFirstMaxY + 1,\n      secondMaxY: total + 1,\n      rows: newRows\n    });\n  };\n\n  const filterHoursData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), 0, 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), 1, 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 3600000);\n    var newFirstGeneralData = [];\n    var newSecondGeneralData = [];\n    var newLabels = [];\n    var newFirstMaxY = 0;\n    var total = 0;\n    var newRows = [];\n\n    const filter = (value, year, month, day, hour) => {\n      return state.events.filter(el => el.eventType === value && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month && el.createdAt.getDate() === day && el.createdAt.getHours() < hour);\n    };\n\n    for (var i = 0; i < periods; i++) {\n      var year = state.minDate.getFullYear();\n      var month = state.minDate.getMonth();\n      var day = state.minDate.getDate();\n      var hour = state.minDate.getHours() + i;\n      var date = new Date(year, month, day, hour, 0, 0, 0);\n      year = date.getFullYear();\n      month = date.getMonth();\n      day = date.getDate();\n      hour = date.getHours();\n      const exits = filter(\"exit\", year, month, day, hour);\n      const entrys = filter(\"entry\", year, month, day, hour + 1);\n      const numberEvents = entrys.length - exits.length;\n      newFirstGeneralData.push({\n        x: i,\n        y: numberEvents\n      });\n      var hourString = hour.toString();\n      if (hour < 10) hourString = \"0\" + hourString;\n      const label = hourString + \":00\";\n      newLabels.push(label);\n      newRows.push({\n        period: label,\n        quantity: numberEvents\n      });\n      total = entrys.length;\n      newSecondGeneralData.push({\n        x: i,\n        y: total\n      });\n      if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n    }\n\n    setState({ ...state,\n      firstGeneralData: newFirstGeneralData,\n      secondGeneralData: newSecondGeneralData,\n      labels: newLabels,\n      firstMaxY: newFirstMaxY + 1,\n      secondMaxY: total + 1,\n      rows: newRows\n    });\n  };\n\n  const filterDaysData = () => {\n    const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), 0, 0, 0, 0);\n    const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), 1, 0, 0, 0);\n    const periods = Math.ceil((finalData - initialData) / 86400000);\n    var newFirstGeneralData = [];\n    var newSecondGeneralData = [];\n    var newLabels = [];\n    var newFirstMaxY = 0;\n    var total = 0;\n    var newRows = [];\n\n    const filter = (year, month, day) => {\n      return state.events.filter(el => el.eventType === \"entry\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month && el.createdAt.getDate() === day);\n    };\n\n    for (var i = 0; i < periods; i++) {\n      var year = state.minDate.getFullYear();\n      var month = state.minDate.getMonth();\n      var day = state.minDate.getDate() + i;\n      var date = new Date(year, month, day);\n      year = date.getFullYear();\n      month = date.getMonth();\n      day = date.getDate();\n      const newEvents = filter(year, month, day);\n      const numberEvents = newEvents.length;\n      newFirstGeneralData.push({\n        x: i,\n        y: numberEvents\n      });\n      var dayString = day.toString();\n      if (day < 10) dayString = \"0\" + dayString;\n      const label = dayString + \" de \" + monthName[month];\n      newLabels.push(label);\n      newRows.push({\n        period: label,\n        quantity: numberEvents\n      });\n      total += numberEvents;\n      newSecondGeneralData.push({\n        x: i,\n        y: total\n      });\n      if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n    }\n\n    setState({ ...state,\n      firstGeneralData: newFirstGeneralData,\n      secondGeneralData: newSecondGeneralData,\n      labels: newLabels,\n      firstMaxY: newFirstMaxY + 1,\n      secondMaxY: total + 1,\n      rows: newRows\n    });\n  };\n\n  const filterMonthsData = () => {\n    const periods = (state.maxDate.getFullYear() - state.minDate.getFullYear()) * 12 + (state.maxDate.getMonth() - state.minDate.getMonth()) + 1;\n    var newFirstGeneralData = [];\n    var newFirstPerStoreData = [];\n    var newSecondGeneralData = [];\n    var newSecondPerStoreData = [];\n    var newLabels = [];\n    var newFirstMaxY = 0;\n    var total = 0;\n    var newRows = [];\n    state.storesData.map(() => {\n      newFirstPerStoreData.push([]);\n      newSecondPerStoreData.push([]);\n    });\n\n    const filter = (year, month) => {\n      return state.events.filter(el => el.eventType === \"entry\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month);\n    };\n\n    const filterStore = (year, month, storeNumber) => {\n      return filter(year, month).filter(el => el.storeNumber === storeNumber);\n    };\n\n    for (var i = 0; i < periods; i++) {\n      var year = state.minDate.getFullYear();\n      var month = state.minDate.getMonth() + i;\n\n      if (month >= 12) {\n        year += Math.floor(month / 12);\n        month = month % 12;\n      }\n\n      const newEvents = filter(year, month);\n      const numberEvents = newEvents.length;\n      newFirstGeneralData.push({\n        x: i,\n        y: numberEvents\n      });\n      const label = monthName[month] + \" de \" + year.toString();\n      newLabels.push(label);\n      newRows.push({\n        period: label,\n        quantity: numberEvents\n      });\n      total += numberEvents;\n      newSecondGeneralData.push({\n        x: i,\n        y: total\n      });\n      if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n      var j = 0;\n      state.storesData.map(store => {\n        const newStoreEvents = filterStore(year, month, store.storeNumber);\n        const numberStoreEvents = newStoreEvents.length;\n        newFirstPerStoreData[j].push({\n          x: i,\n          y: numberStoreEvents\n        });\n        j++;\n      });\n    }\n\n    var i = 0;\n    state.storesData.map(() => {\n      var newTotal = 0;\n      newFirstPerStoreData[i].map(data => {\n        newTotal += data.y;\n        newSecondPerStoreData[i].push({\n          x: data.x,\n          y: newTotal\n        });\n      });\n      i++;\n    });\n    setState({ ...state,\n      firstGeneralData: newFirstGeneralData,\n      secondGeneralData: newSecondGeneralData,\n      firstPerStoreData: newFirstPerStoreData,\n      secondPerStoreData: newSecondPerStoreData,\n      labels: newLabels,\n      firstMaxY: newFirstMaxY + 1,\n      secondMaxY: total + 1,\n      rows: newRows\n    });\n  };\n\n  const columns = [{\n    id: 'period',\n    label: 'Período',\n    minWidth: 200,\n    align: 'center'\n  }, {\n    id: 'quantity',\n    label: 'Quantidade de clientes',\n    minWidth: 200,\n    align: 'center'\n  }];\n\n  const createSortHandler = property => event => {\n    const isAsc = state.orderBy === property && state.order === 'asc';\n    setState({ ...state,\n      order: isAsc ? 'desc' : 'asc',\n      orderBy: property\n    });\n  };\n\n  function descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) return -1;\n    if (b[orderBy] > a[orderBy]) return 1;\n    return 0;\n  }\n\n  function getComparator(order, orderBy) {\n    return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n  }\n\n  function stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n      const order = comparator(a[0], b[0]);\n      if (order !== 0) return order;\n      return a[1] - b[1];\n    });\n    return stabilizedThis.map(el => el[0]);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 15\n    }\n  }, \"Selecionar per\\xEDodo de visualiza\\xE7\\xE3o:\")), /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KeyboardDateTimePicker, {\n    variant: \"inline\",\n    ampm: false,\n    label: \"Limite inferior\",\n    value: state.minDate,\n    format: \"dd/MM/yyyy HH:mm\",\n    onChange: handleMinDate,\n    disableFuture: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(KeyboardDateTimePicker, {\n    variant: \"inline\",\n    ampm: false,\n    label: \"Limite superior\",\n    value: state.maxDate,\n    format: \"dd/MM/yyyy HH:mm\",\n    onChange: handleMaxDate,\n    disableFuture: true,\n    minDate: state.minDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: \"updateStatistics\",\n    onClick: handleUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 9\n    }\n  }, \"Atualizar\"), /*#__PURE__*/React.createElement(Section, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 26\n    }\n  }, \"Gr\\xE1ficos\")), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setState({ ...state,\n        graphsExplanation: !state.graphsExplanation\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 13\n    }\n  }, \"?\")), state.graphsExplanation ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SubText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 11\n    }\n  }, \"O primeiro gr\\xE1fico mostra a quantidade de clientes em cada per\\xEDodo de tempo, enquanto o segundo mostra o acumulado dessa quantidade ao longo do tempo.\"), /*#__PURE__*/React.createElement(SubText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 9\n    }\n  }, \"O tamanho dos per\\xEDodos \\xE9 calculado automaticamente a partir do intervalo de visualiza\\xE7\\xE3o definido. Para intervalos de at\\xE9 2 horas, os per\\xEDodos s\\xE3o de 10 minutos; para at\\xE9 1 dia, s\\xE3o de 1 hora. Nesses casos, o primeiro gr\\xE1fico mostra a quantidade de clientes dentro da loja em cada momento. Para intervalos de at\\xE9 2 meses, os per\\xEDodos s\\xE3o de 1 dia; para intervalos maiores, s\\xE3o de 1 m\\xEAs. Nesses casos, o primeiro gr\\xE1fico mostra a quantidade de clientes que passaram pela loja no per\\xEDodo.\")) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(AllGraphSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GraphSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 17\n    }\n  }, \"Quantidade geral de clientes por per\\xEDodo\"), /*#__PURE__*/React.createElement(XYPlot, {\n    width: 550,\n    height: 400,\n    margin: {\n      left: 80,\n      bottom: 100\n    },\n    yDomain: [0, state.firstMaxY],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    title: 'Período',\n    on0: true,\n    tickTotal: state.firstGeneralData.length,\n    tickLabelAngle: -45,\n    tickFormat: v => state.labels[v],\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    title: 'Clientes',\n    on0: true,\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(LineMarkSeries, {\n    className: \"series\",\n    data: state.firstGeneralData,\n    style: {\n      strokeWidth: '3px'\n    },\n    size: 2,\n    lineStyle: {\n      stroke: '#000066'\n    },\n    markStyle: {\n      stroke: '#009999'\n    },\n    onValueMouseOver: d => setState({ ...state,\n      overFirstGeneralGraph: d\n    }),\n    onValueMouseOut: d => setState({ ...state,\n      overFirstGeneralGraph: false\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 21\n    }\n  }), state.overFirstGeneralGraph && /*#__PURE__*/React.createElement(Hint, {\n    value: state.overFirstGeneralGraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(HintDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 32\n    }\n  }, \"Per\\xEDodo:\"), \" \", state.labels[state.overFirstGeneralGraph.x]), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 32\n    }\n  }, \"Total de clientes:\"), \" \", state.overFirstGeneralGraph.y))))), /*#__PURE__*/React.createElement(GraphSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 17\n    }\n  }, \"Quantidade geral acumulada de clientes\"), /*#__PURE__*/React.createElement(XYPlot, {\n    width: 550,\n    height: 400,\n    margin: {\n      left: 80,\n      bottom: 100\n    },\n    yDomain: [0, state.secondMaxY],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    title: 'Período',\n    on0: true,\n    tickTotal: state.secondGeneralData.length,\n    tickLabelAngle: -45,\n    tickFormat: v => state.labels[v],\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    title: 'Clientes',\n    on0: true,\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(LineMarkSeries, {\n    className: \"series\",\n    data: state.secondGeneralData,\n    style: {\n      strokeWidth: '3px'\n    },\n    size: 2,\n    lineStyle: {\n      stroke: '#000066'\n    },\n    markStyle: {\n      stroke: '#009999'\n    },\n    onValueMouseOver: d => setState({ ...state,\n      overSecondGeneralGraph: d\n    }),\n    onValueMouseOut: d => setState({ ...state,\n      overSecondGeneralGraph: false\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 21\n    }\n  }), state.overSecondGeneralGraph && /*#__PURE__*/React.createElement(Hint, {\n    value: state.overSecondGeneralGraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(HintDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 32\n    }\n  }, \"Per\\xEDodo:\"), \" \", state.labels[state.overSecondGeneralGraph.x]), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 32\n    }\n  }, \"Total de clientes acumulado:\"), \" \", state.overSecondGeneralGraph.y)))))), /*#__PURE__*/React.createElement(AllGraphSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GraphSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 17\n    }\n  }, \"Quantidade de clientes por per\\xEDodo por loja\"), /*#__PURE__*/React.createElement(XYPlot, {\n    width: 550,\n    height: 400,\n    margin: {\n      left: 80,\n      bottom: 100\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    title: 'Período',\n    on0: true,\n    tickTotal: state.firstPerStoreData.length,\n    tickLabelAngle: -45,\n    tickFormat: v => state.labels[v],\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    title: 'Clientes',\n    on0: true,\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 21\n    }\n  }), state.storesData.map(store => /*#__PURE__*/React.createElement(LineMarkSeries, {\n    key: store.storeNumber,\n    className: \"series-\" + store.storeNumber,\n    data: state.firstPerStoreData[store.index],\n    style: {\n      strokeWidth: '3px'\n    },\n    size: 2,\n    lineStyle: {\n      stroke: lineColors[store.index]\n    },\n    markStyle: {\n      stroke: '#0099999'\n    },\n    onValueMouseOver: d => setState({ ...state,\n      overFirstPerStoreGraph: d\n    }),\n    onValueMouseOut: d => setState({ ...state,\n      overFirstPerStoreGraph: false\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 25\n    }\n  })), state.overFirstPerStoreGraph && /*#__PURE__*/React.createElement(Hint, {\n    value: state.overFirstPerStoreGraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(HintDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 32\n    }\n  }, \"Per\\xEDodo:\"), \" \", state.labels[state.overFirstPerStoreGraph.x]), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 32\n    }\n  }, \"Total de clientes:\"), \" \", state.overFirstPerStoreGraph.y)))), /*#__PURE__*/React.createElement(DiscreteColorLegend, {\n    width: 550,\n    items: legendItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(GraphSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 17\n    }\n  }, \"Quantidade acumulada de clientes por loja\"), /*#__PURE__*/React.createElement(XYPlot, {\n    width: 550,\n    height: 400,\n    margin: {\n      left: 80,\n      bottom: 100\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    title: 'Período',\n    on0: true,\n    tickTotal: state.secondPerStoreData.length,\n    tickLabelAngle: -45,\n    tickFormat: v => state.labels[v],\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    title: 'Clientes',\n    on0: true,\n    style: {\n      text: {\n        stroke: 'none',\n        fill: '#555555',\n        fontWeight: 200\n      },\n      line: {\n        stroke: '#aaaaaa'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 21\n    }\n  }), state.storesData.map(store => /*#__PURE__*/React.createElement(LineMarkSeries, {\n    key: store.storeNumber,\n    className: \"series-\" + store.storeNumber,\n    data: state.secondPerStoreData[store.index],\n    style: {\n      strokeWidth: '3px'\n    },\n    size: 2,\n    lineStyle: {\n      stroke: lineColors[store.index]\n    },\n    markStyle: {\n      stroke: '#0099999'\n    },\n    onValueMouseOver: d => setState({ ...state,\n      overSecondPerStoreGraph: d\n    }),\n    onValueMouseOut: d => setState({ ...state,\n      overSecondPerStoreGraph: false\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 25\n    }\n  })), state.overSecondPerStoreGraph && /*#__PURE__*/React.createElement(Hint, {\n    value: state.overSecondPerStoreGraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(HintDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 32\n    }\n  }, \"Per\\xEDodo:\"), \" \", state.labels[state.overSecondPerStoreGraph.x]), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 32\n    }\n  }, \"Total de clientes acumulado:\"), \" \", state.overSecondPerStoreGraph.y))))), /*#__PURE__*/React.createElement(DiscreteColorLegend, {\n    width: 550,\n    items: legendItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Section, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 26\n    }\n  }, \"Tabela\")), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setState({ ...state,\n        tablesExplanation: !state.tablesExplanation\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 13\n    }\n  }, \"?\")), state.tablesExplanation ? /*#__PURE__*/React.createElement(SubText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 9\n    }\n  }, \"A tabela exibe os mesmos dados que o gr\\xE1fico, permitindo ordenar os dados no tempo e, principalmente, em rela\\xE7\\xE3o \\xE0 quantidade de clientes em cada per\\xEDodo.\") : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(TableContainer, {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(MainHeaderTableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 25\n    }\n  }), columns.map(column => /*#__PURE__*/React.createElement(MainHeaderTableCell, {\n    key: column.id,\n    align: column.align,\n    style: {\n      minWidth: column.minWidth\n    },\n    sortDirection: state.orderBy === column.id ? state.order : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TableSortLabel, {\n    active: state.orderBy === column.id,\n    direction: state.orderBy === column.id ? state.order : 'asc',\n    onClick: createSortHandler(column.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 33\n    }\n  }, column.label, state.orderBy === column.id ? /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.visuallyHidden,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 41\n    }\n  }, state.order === 'desc' ? 'sorted descending' : 'sorted ascending') : null))))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 17\n    }\n  }, stableSort(state.rows, getComparator(state.order, state.orderBy)).slice(state.page * state.rowsPerPage, (state.page + 1) * state.rowsPerPage).map(row => /*#__PURE__*/React.createElement(TableRow, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(BodyTableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 29\n    }\n  }), columns.map(column => /*#__PURE__*/React.createElement(BodyTableCell, {\n    align: column.align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 33\n    }\n  }, row[column.id]))))))), /*#__PURE__*/React.createElement(StyledTablePagination, {\n    rowsPerPageOptions: [10, 25, 50, 100],\n    labelRowsPerPage: \"Per\\xEDodos por p\\xE1gina:\",\n    labelDisplayedRows: ({\n      from,\n      to,\n      count\n    }) => `${from}-${to} de ${count}`,\n    component: \"div\",\n    count: state.rows.length,\n    rowsPerPage: state.rowsPerPage,\n    page: state.page,\n    onChangePage: (e, newPage) => {\n      setState({ ...state,\n        page: newPage\n      });\n    },\n    onChangeRowsPerPage: e => {\n      setState({ ...state,\n        rowsPerPage: e.target.value,\n        page: 0\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Statistics;","map":{"version":3,"sources":["/home/italorennan/csc03FrontEnd/src/sections/Global/Statistics.js"],"names":["React","useState","useEffect","Section","Text","SubText","TextSection","Button","AllGraphSection","GraphSection","HintDiv","MainHeaderTableCell","BodyTableCell","StyledTablePagination","XYPlot","LineMarkSeries","XAxis","YAxis","Hint","DiscreteColorLegend","DateFnsUtils","MuiPickersUtilsProvider","KeyboardDateTimePicker","makeStyles","Table","TableBody","TableContainer","TableHead","TableRow","TableSortLabel","useRowStyles","root","borderBottom","useStyles","width","container","maxHeight","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","Statistics","store1","storeName","storeNumber","accessCode","index","store2","storesData","lineColors","legendItems","map","store","push","title","color","state","setState","minDate","Date","now","getFullYear","getMonth","getDate","maxDate","clicked","timeScale","storesQuantity","length","events","firstGeneralData","secondGeneralData","firstPerStoreData","secondPerStoreData","labels","firstMaxY","secondMaxY","overFirstGeneralGraph","overSecondGeneralGraph","overFirstPerStoreGraph","overSecondPerStoreGraph","graphsExplanation","tablesExplanation","page","rowsPerPage","rows","order","orderBy","getData","monthName","classes","handleMinDate","date","timeDif","handleMaxDate","newEvents","eventType","createdAt","handleUpdate","filterMinutesData","filterHoursData","filterDaysData","filterMonthsData","initialData","getHours","getMinutes","finalData","periods","Math","ceil","newFirstGeneralData","newSecondGeneralData","newLabels","newFirstMaxY","total","newRows","filter","value","year","month","day","hour","minute","el","i","minuteString","toString","hourString","label","exits","entrys","numberEvents","x","y","period","quantity","dayString","newFirstPerStoreData","newSecondPerStoreData","filterStore","floor","j","newStoreEvents","numberStoreEvents","newTotal","data","columns","id","minWidth","align","createSortHandler","property","event","isAsc","descendingComparator","a","b","getComparator","stableSort","array","comparator","stabilizedThis","sort","left","bottom","v","text","stroke","fill","fontWeight","line","strokeWidth","d","column","slice","row","from","to","count","e","newPage","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Section, Text, SubText, TextSection, Button, AllGraphSection, GraphSection, HintDiv, MainHeaderTableCell, BodyTableCell, StyledTablePagination } from '../../pages/Global/styles';\nimport { XYPlot, LineMarkSeries, XAxis, YAxis, Hint } from 'react-vis';\nimport DiscreteColorLegend from 'react-vis/dist/legends/discrete-color-legend';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDateTimePicker } from '@material-ui/pickers';\nimport 'react-vis/dist/style.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\n\nconst useRowStyles = makeStyles({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n});\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n    },\n    container: {\n        maxHeight: '100%',\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    }\n});\n\nfunction Statistics() {\n    // Puxar do DB\n    const store1 = {\n        storeName: \"Loja Fortaleza\",\n        storeNumber: 8001,\n        accessCode: \"temp\",\n        index: 0\n    };\n    const store2 = {\n        storeName: \"Loja São Paulo\",\n        storeNumber: 8002,\n        accessCode: \"temp\",\n        index: 1\n    };\n    const storesData = [store1, store2];\n    const lineColors = ['#000066', '#cc0066', '#cc0000', '#b266ff', '#33ff99'];\n    var legendItems = [];\n    storesData.map((store) => {\n        legendItems.push({title: store.storeName, color: lineColors[store.index]});\n    });\n\n    const [state, setState] = useState({minDate: new Date((new Date(Date.now())).getFullYear(), (new Date(Date.now())).getMonth(), (new Date(Date.now())).getDate(), 0, 0, 0, 0),\n                                        maxDate: new Date((new Date(Date.now())).getFullYear(), (new Date(Date.now())).getMonth(), (new Date(Date.now())).getDate(), 23, 59, 59, 999),\n                                        clicked: false,\n                                        timeScale: 'hours',\n                                        storesData: storesData,\n                                        storesQuantity: storesData.length,\n                                        events: [],\n                                        firstGeneralData: [],\n                                        secondGeneralData: [],\n                                        firstPerStoreData: [],\n                                        secondPerStoreData: [],\n                                        labels: [],\n                                        firstMaxY: 0,\n                                        secondMaxY: 0,\n                                        overFirstGeneralGraph: false,\n                                        overSecondGeneralGraph: false,\n                                        overFirstPerStoreGraph: false,\n                                        overSecondPerStoreGraph: false,\n                                        graphsExplanation: false,\n                                        tablesExplanation: false,\n                                        page: 0,\n                                        rowsPerPage: 10,\n                                        rows: [],\n                                        order: 'asc',\n                                        orderBy: 'quantity'});\n\n    useEffect(() => {\n        if (!state.clicked) getData(state.minDate, state.maxDate);\n    });\n\n    const monthName = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\n    const classes = useStyles();\n\n    const handleMinDate = (date: Date | null) => {\n        const timeDif = state.maxDate - date;\n        if (timeDif > 0) getData(date, state.maxDate);\n    }\n\n    const handleMaxDate = (date: Date | null) => {\n        const timeDif = date - state.minDate;\n        if (timeDif > 0) getData(state.minDate, date);\n    }\n\n    const getData = (minDate, maxDate) => {\n        // Puxar dados do DB\n        // Usar variável state.storeSelected\n        const newEvents = [\n            {storeNumber: 8001, eventType: \"entry\", createdAt: new Date(2020, 5, 30, 10)},\n            {storeNumber: 8001, eventType: \"exit\", createdAt: new Date(2020, 5, 30, 10, 30)},\n            {storeNumber: 8001, eventType: \"entry\", createdAt: new Date(2020, 5, 30, 10)},\n            {storeNumber: 8001, eventType: \"exit\", createdAt: new Date(2020, 5, 30, 11, 30)},\n            {storeNumber: 8002, eventType: \"entry\", createdAt: new Date(2020, 5, 30, 10)},\n            {storeNumber: 8002, eventType: \"exit\", createdAt: new Date(2020, 5, 30, 12, 30)},\n            {storeNumber: 8002, eventType: \"entry\", createdAt: new Date(2020, 5, 30, 10)},\n            {storeNumber: 8002, eventType: \"exit\", createdAt: new Date(2020, 5, 30, 13, 30)},\n            {storeNumber: 8002, eventType: \"entry\", createdAt: new Date(2020, 5, 30, 10)},\n            {storeNumber: 8002, eventType: \"exit\", createdAt: new Date(2020, 5, 30, 10, 20)},\n            {storeNumber: 8002, eventType: \"entry\", createdAt: new Date(2020, 5, 30, 11)},\n            {storeNumber: 8002, eventType: \"exit\", createdAt: new Date(2020, 5, 30, 11, 20)},\n            {storeNumber: 8002, eventType: \"entry\", createdAt: new Date(2020, 5, 30, 11)},\n            {storeNumber: 8002, eventType: \"exit\", createdAt: new Date(2020, 5, 30, 14, 20)},\n            {storeNumber: 8002, eventType: \"entry\", createdAt: new Date(2020, 5, 30, 12)},\n            {storeNumber: 8002, eventType: \"exit\", createdAt: new Date(2020, 5, 30, 13, 20)},\n            {storeNumber: 8001, eventType: \"entry\", createdAt: new Date(2020, 4, 30)},\n            {storeNumber: 8001, eventType: \"exit\", createdAt: new Date(2020, 3, 30)},\n            {storeNumber: 8001, eventType: \"entry\", createdAt: new Date(2020, 3, 30)},\n            {storeNumber: 8001, eventType: \"exit\", createdAt: new Date(2020, 3, 15)},\n            {storeNumber: 8001, eventType: \"entry\", createdAt: new Date(2020, 3, 7)},\n            {storeNumber: 8001, eventType: \"entry\", createdAt: new Date(2020, 2, 10)},\n            {storeNumber: 8001, eventType: \"entry\", createdAt: new Date(2020, 2, 14)},\n            {storeNumber: 8002, eventType: \"entry\", createdAt: new Date(2020, 2, 20)},\n            {storeNumber: 8002, eventType: \"exit\", createdAt: new Date(2020, 2, 2)},\n            {storeNumber: 8002, eventType: \"entry\", createdAt: new Date(2020, 2, 14)},\n            {storeNumber: 8002, eventType: \"entry\", createdAt: new Date(2020, 2, 14)},\n            {storeNumber: 8002, eventType: \"entry\", createdAt: new Date(2020, 2, 14)},\n            {storeNumber: 8002, eventType: \"entry\", createdAt: new Date(2020, 2, 13)},\n            {storeNumber: 8002, eventType: \"entry\", createdAt: new Date(2020, 2, 15)},\n            {storeNumber: 8002, eventType: \"entry\", createdAt: new Date(2020, 2, 15)},\n            {storeNumber: 8002, eventType: \"exit\", createdAt: new Date(2020, 2, 16)}\n        ];\n\n        const timeDif = maxDate - minDate;\n        if (timeDif < 7200000) setState({...state, clicked: true, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"minutes\"});\n        else if (timeDif < 86400000) setState({...state, clicked: true, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"hours\"});\n        else if (timeDif < 5259600000) setState({...state, clicked: true, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"days\"});\n        else setState({...state, clicked: true, minDate: minDate, maxDate: maxDate, events: newEvents, timeScale: \"months\"});\n    }\n\n    const handleUpdate = () => {\n        switch (state.timeScale) {\n            case \"minutes\": filterMinutesData(); break;\n            case \"hours\": filterHoursData(); break;\n            case \"days\": filterDaysData(); break;\n            case \"months\": filterMonthsData(); break;\n            default: break;\n        }\n    }\n\n    const filterMinutesData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), state.minDate.getMinutes(), 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), state.maxDate.getMinutes(), 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 600000);\n\n        var newFirstGeneralData = [];\n        var newSecondGeneralData = [];\n        var newLabels = [];\n        var newFirstMaxY = 0;\n        var total = 0;\n        var newRows = [];\n\n        const filter = (value, year, month, day, hour, minute) => {\n            return state.events.filter(el => (el.eventType === value && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month &&\n                                              el.createdAt.getDate() === day && (el.createdAt.getHours() * 60 + el.createdAt.getMinutes() < hour * 60 + minute)));\n        }\n\n        for (var i = 0; i < periods; i++) {\n            var year = state.minDate.getFullYear();\n            var month = state.minDate.getMonth();\n            var day = state.minDate.getDate();\n            var hour = state.minDate.getHours();\n            var minute = state.minDate.getMinutes() + 10 * i;\n            var date = new Date(year, month, day, hour, minute, 0, 0);\n            year = date.getFullYear();\n            month = date.getMonth();\n            day = date.getDate();\n            hour = date.getHours();\n            minute = date.getMinutes();\n\n            var minuteString = minute.toString();\n            if (minute < 10)\n                minuteString = \"0\" + minuteString;\n            var hourString = hour.toString();\n            if (hour < 10)\n                hourString = \"0\" + hourString;\n            const label = hourString + \":\" + minuteString;\n            newLabels.push(label);\n\n            const exits = filter(\"exit\", year, month, day, hour, minute);\n            minute += 10;\n            if (minute >= 60) {\n                hour += 1;\n                minute = minute % 60;\n            }\n            const entrys = filter(\"entry\", year, month, day, hour, minute);\n            const numberEvents = entrys.length - exits.length;\n            newFirstGeneralData.push({ x: i, y: numberEvents });\n            newRows.push({ period: label, quantity: numberEvents });\n            \n            total = entrys.length;\n            newSecondGeneralData.push({ x: i, y: total });\n\n            if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n        }\n\n        setState({...state, firstGeneralData: newFirstGeneralData, secondGeneralData: newSecondGeneralData, labels: newLabels, firstMaxY: newFirstMaxY + 1, secondMaxY: total + 1, rows: newRows});\n    }\n\n    const filterHoursData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), state.minDate.getHours(), 0, 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), state.maxDate.getHours(), 1, 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 3600000);\n\n        var newFirstGeneralData = [];\n        var newSecondGeneralData = [];\n        var newLabels = [];\n        var newFirstMaxY = 0;\n        var total = 0;\n        var newRows = [];\n        \n        const filter = (value, year, month, day, hour) => {\n            return state.events.filter(el => (el.eventType === value && el.createdAt.getFullYear() === year &&\n                                              el.createdAt.getMonth() === month && el.createdAt.getDate() === day && el.createdAt.getHours() < hour));\n        }\n\n        for (var i = 0; i < periods; i++) {\n            var year = state.minDate.getFullYear();\n            var month = state.minDate.getMonth();\n            var day = state.minDate.getDate();\n            var hour = state.minDate.getHours() + i;\n            var date = new Date(year, month, day, hour, 0, 0, 0);\n            year = date.getFullYear();\n            month = date.getMonth();\n            day = date.getDate();\n            hour = date.getHours();\n\n            const exits = filter(\"exit\", year, month, day, hour);\n            const entrys = filter(\"entry\", year, month, day, hour + 1);\n            const numberEvents = entrys.length - exits.length;\n            newFirstGeneralData.push({ x: i, y: numberEvents });\n            var hourString = hour.toString();\n            if (hour < 10)\n                hourString = \"0\" + hourString;\n            const label = hourString + \":00\";\n            newLabels.push(label);\n            newRows.push({ period: label, quantity: numberEvents });\n\n            total = entrys.length;\n            newSecondGeneralData.push({ x: i, y: total });\n\n            if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n        }\n\n        setState({...state, firstGeneralData: newFirstGeneralData, secondGeneralData: newSecondGeneralData, labels: newLabels, firstMaxY: newFirstMaxY + 1, secondMaxY: total + 1, rows: newRows});\n    }\n\n    const filterDaysData = () => {\n        const initialData = new Date(state.minDate.getFullYear(), state.minDate.getMonth(), state.minDate.getDate(), 0, 0, 0, 0);\n        const finalData = new Date(state.maxDate.getFullYear(), state.maxDate.getMonth(), state.maxDate.getDate(), 1, 0, 0, 0);\n\n        const periods = Math.ceil((finalData - initialData) / 86400000);\n\n        var newFirstGeneralData = [];\n        var newSecondGeneralData = [];\n        var newLabels = [];\n        var newFirstMaxY = 0;\n        var total = 0;\n        var newRows = [];\n\n        const filter = (year, month, day) => {\n            return state.events.filter(el => (el.eventType === \"entry\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month && el.createdAt.getDate() === day));\n        }\n\n        for (var i = 0; i < periods; i++) {\n            var year = state.minDate.getFullYear();\n            var month = state.minDate.getMonth();\n            var day = state.minDate.getDate() + i;\n            var date = new Date(year, month, day);\n            year = date.getFullYear();\n            month = date.getMonth();\n            day = date.getDate();\n\n            const newEvents = filter(year, month, day);\n            const numberEvents = newEvents.length;\n            newFirstGeneralData.push({ x: i, y: numberEvents });\n            var dayString = day.toString();\n            if (day < 10)\n                dayString = \"0\" + dayString;\n            const label = dayString + \" de \" + monthName[month];\n            newLabels.push(label);\n            newRows.push({ period: label, quantity: numberEvents });\n            \n            total += numberEvents;\n            newSecondGeneralData.push({ x: i, y: total });\n\n            if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n        }\n\n        setState({...state, firstGeneralData: newFirstGeneralData, secondGeneralData: newSecondGeneralData, labels: newLabels, firstMaxY: newFirstMaxY + 1, secondMaxY: total + 1, rows: newRows});\n    }\n\n    const filterMonthsData = () => {\n        const periods = (state.maxDate.getFullYear() - state.minDate.getFullYear()) * 12 + (state.maxDate.getMonth() - state.minDate.getMonth()) + 1;\n\n        var newFirstGeneralData = [];\n        var newFirstPerStoreData = [];\n        var newSecondGeneralData = [];\n        var newSecondPerStoreData = [];\n        var newLabels = [];\n        var newFirstMaxY = 0;\n        var total = 0;\n        var newRows = [];\n\n        state.storesData.map(() => {\n            newFirstPerStoreData.push([]);\n            newSecondPerStoreData.push([]);\n        });\n\n        const filter = (year, month) => {\n            return state.events.filter(el => (el.eventType === \"entry\" && el.createdAt.getFullYear() === year && el.createdAt.getMonth() === month));\n        }\n\n        const filterStore = (year, month, storeNumber) => {\n            return filter(year, month).filter(el => (el.storeNumber === storeNumber));\n        }\n\n        for (var i = 0; i < periods; i++) {\n            var year = state.minDate.getFullYear();\n            var month = state.minDate.getMonth() + i;\n            if (month >= 12) {\n                year += Math.floor(month / 12);\n                month = month % 12;\n            }\n\n            const newEvents = filter(year, month);\n            const numberEvents = newEvents.length;\n            newFirstGeneralData.push({ x: i, y: numberEvents });\n            const label = monthName[month] + \" de \" + year.toString();\n            newLabels.push(label);\n            newRows.push({ period: label, quantity: numberEvents });\n\n            total += numberEvents;\n            newSecondGeneralData.push({ x: i, y: total });\n\n            if (numberEvents > newFirstMaxY) newFirstMaxY = numberEvents;\n\n            var j = 0;\n            state.storesData.map((store) => {\n                const newStoreEvents = filterStore(year, month, store.storeNumber);\n                const numberStoreEvents = newStoreEvents.length;\n                newFirstPerStoreData[j].push({ x: i, y: numberStoreEvents });\n                j++;\n            });\n        }\n\n        var i = 0;\n        state.storesData.map(() => {\n            var newTotal = 0;\n            newFirstPerStoreData[i].map((data) => {\n                newTotal += data.y;\n                newSecondPerStoreData[i].push({ x: data.x, y: newTotal });\n            });\n            i++;\n        })\n\n        setState({...state, firstGeneralData: newFirstGeneralData, secondGeneralData: newSecondGeneralData, firstPerStoreData: newFirstPerStoreData, secondPerStoreData: newSecondPerStoreData, labels: newLabels, firstMaxY: newFirstMaxY + 1, secondMaxY: total + 1, rows: newRows});\n    }\n\n    const columns = [\n        { id: 'period', label: 'Período', minWidth: 200, align: 'center'},\n        { id: 'quantity', label: 'Quantidade de clientes', minWidth: 200, align: 'center'}\n    ];\n\n    const createSortHandler = (property) => (event) => {\n        const isAsc = state.orderBy === property && state.order === 'asc';\n        setState({...state, order: (isAsc ? 'desc' : 'asc'), orderBy: property});\n    }\n\n    function descendingComparator(a, b, orderBy) {\n        if (b[orderBy] < a[orderBy]) \n            return -1;\n        if (b[orderBy] > a[orderBy])\n            return 1;\n        return 0;\n    }\n\n    function getComparator(order, orderBy) {\n        return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n    }\n\n    function stableSort(array, comparator) {\n        const stabilizedThis = array.map((el, index) => [el, index]);\n        stabilizedThis.sort((a, b) => {\n            const order = comparator(a[0], b[0]);\n            if (order !== 0) return order;\n            return a[1] - b[1];\n        });\n        return stabilizedThis.map((el) => el[0]);\n    }\n\n    return (\n        <>\n        <Text><span>Selecionar período de visualização:</span></Text>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDateTimePicker \n                variant=\"inline\" ampm={false}\n                label=\"Limite inferior\"\n                value={state.minDate} format=\"dd/MM/yyyy HH:mm\"\n                onChange={handleMinDate} disableFuture\n            />\n            <KeyboardDateTimePicker \n                variant=\"inline\" ampm={false}\n                label=\"Limite superior\"\n                value={state.maxDate} format=\"dd/MM/yyyy HH:mm\"\n                onChange={handleMaxDate} disableFuture minDate={state.minDate}\n            />\n        </MuiPickersUtilsProvider>\n        \n        <Button className=\"updateStatistics\" onClick={handleUpdate}>Atualizar</Button>\n\n        <Section>\n            <TextSection><span>Gráficos</span></TextSection>\n            <button onClick={() => {setState({...state, graphsExplanation: !state.graphsExplanation})}}>?</button>\n        </Section>\n\n        {state.graphsExplanation ?\n        \n        <><SubText>O primeiro gráfico mostra a quantidade de clientes em cada período de tempo, enquanto o segundo mostra o acumulado dessa quantidade ao longo do tempo.</SubText>\n        <SubText>O tamanho dos períodos é calculado automaticamente a partir do intervalo de visualização definido. Para intervalos de até 2 horas, os períodos são de 10 minutos; para até 1 dia, são de 1 hora. Nesses casos, o primeiro gráfico mostra a quantidade de clientes dentro da loja em cada momento. Para intervalos de até 2 meses, os períodos são de 1 dia; para intervalos maiores, são de 1 mês. Nesses casos, o primeiro gráfico mostra a quantidade de clientes que passaram pela loja no período.</SubText></>\n    \n        : <></>}\n\n        <AllGraphSection>\n            <GraphSection>\n                <Text>Quantidade geral de clientes por período</Text>\n                <XYPlot\n                    width={550} height={400} margin={{ left: 80, bottom: 100 }}\n                    yDomain={[0, state.firstMaxY]}\n                >\n                    <XAxis \n                        title={'Período'} on0={true}\n                        tickTotal={state.firstGeneralData.length} tickLabelAngle={-45}\n                        tickFormat={v => state.labels[v]}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' } }}\n                    />\n                    <YAxis \n                        title={'Clientes'} on0={true}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' }}}\n                    />\n                    <LineMarkSeries \n                        className=\"series\" data={state.firstGeneralData} \n                        style={{ strokeWidth: '3px' }} size={2}\n                        lineStyle={{ stroke: '#000066' }} markStyle={{ stroke: '#009999' }}\n                        onValueMouseOver={d => setState({...state, overFirstGeneralGraph: d})}\n                        onValueMouseOut={d => setState({...state, overFirstGeneralGraph: false})}\n                    />\n                    {state.overFirstGeneralGraph && \n                    <Hint value={state.overFirstGeneralGraph}>\n                        <HintDiv>\n                            <p><span>Período:</span> {state.labels[state.overFirstGeneralGraph.x]}</p>\n                            <p><span>Total de clientes:</span> {state.overFirstGeneralGraph.y}</p>\n                        </HintDiv>\n                    </Hint>}\n                </XYPlot>\n            </GraphSection>\n\n            <GraphSection>\n                <Text>Quantidade geral acumulada de clientes</Text>\n                <XYPlot \n                    width={550} height={400} margin={{ left: 80, bottom: 100 }}\n                    yDomain={[0, state.secondMaxY]}\n                >\n                    <XAxis \n                        title={'Período'} on0={true}\n                        tickTotal={state.secondGeneralData.length} tickLabelAngle={-45}\n                        tickFormat={v => state.labels[v]}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' } }}\n                    />\n                    <YAxis \n                        title={'Clientes'} on0={true}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' }}}\n                    />\n                    <LineMarkSeries \n                        className=\"series\" data={state.secondGeneralData} \n                        style={{ strokeWidth: '3px' }} size={2}\n                        lineStyle={{ stroke: '#000066' }} markStyle={{ stroke: '#009999' }}\n                        onValueMouseOver={d => setState({...state, overSecondGeneralGraph: d})}\n                        onValueMouseOut={d => setState({...state, overSecondGeneralGraph: false})}\n                    />\n                    {state.overSecondGeneralGraph && \n                    <Hint value={state.overSecondGeneralGraph}>\n                        <HintDiv>\n                            <p><span>Período:</span> {state.labels[state.overSecondGeneralGraph.x]}</p>\n                            <p><span>Total de clientes acumulado:</span> {state.overSecondGeneralGraph.y}</p>\n                        </HintDiv>\n                    </Hint>}\n                </XYPlot>\n            </GraphSection>\n        </AllGraphSection>\n\n        <AllGraphSection>\n        <GraphSection>\n                <Text>Quantidade de clientes por período por loja</Text>\n                <XYPlot\n                    width={550} height={400} margin={{ left: 80, bottom: 100 }}\n                >\n                    <XAxis \n                        title={'Período'} on0={true}\n                        tickTotal={state.firstPerStoreData.length} tickLabelAngle={-45}\n                        tickFormat={v => state.labels[v]}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' } }}\n                    />\n                    <YAxis \n                        title={'Clientes'} on0={true}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' }}}\n                    />\n                    {state.storesData.map((store) => (\n                        <LineMarkSeries \n                            key={store.storeNumber} className={\"series-\" + store.storeNumber}\n                            data={state.firstPerStoreData[store.index]}\n                            style={{ strokeWidth: '3px' }} size={2}\n                            lineStyle={{ stroke: lineColors[store.index] }} markStyle={{ stroke: '#0099999' }}\n                            onValueMouseOver={d => setState({...state, overFirstPerStoreGraph: d})}\n                            onValueMouseOut={d => setState({...state, overFirstPerStoreGraph: false})}\n                        />\n                    ))}\n                    {state.overFirstPerStoreGraph && \n                    <Hint value={state.overFirstPerStoreGraph}>\n                        <HintDiv>\n                            <p><span>Período:</span> {state.labels[state.overFirstPerStoreGraph.x]}</p>\n                            <p><span>Total de clientes:</span> {state.overFirstPerStoreGraph.y}</p>\n                        </HintDiv>\n                    </Hint>}\n                </XYPlot>\n                <DiscreteColorLegend width={550} items={legendItems}/>\n            </GraphSection>\n\n            <GraphSection>\n                <Text>Quantidade acumulada de clientes por loja</Text>\n                <XYPlot \n                    width={550} height={400} margin={{ left: 80, bottom: 100 }}\n                >\n                    <XAxis \n                        title={'Período'} on0={true}\n                        tickTotal={state.secondPerStoreData.length} tickLabelAngle={-45}\n                        tickFormat={v => state.labels[v]}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' } }}\n                    />\n                    <YAxis \n                        title={'Clientes'} on0={true}\n                        style={{ text: { stroke: 'none', fill: '#555555', fontWeight: 200 },\n                                    line: { stroke: '#aaaaaa' }}}\n                    />\n                    {state.storesData.map((store) => (\n                        <LineMarkSeries \n                            key={store.storeNumber} className={\"series-\" + store.storeNumber}\n                            data={state.secondPerStoreData[store.index]}\n                            style={{ strokeWidth: '3px' }} size={2}\n                            lineStyle={{ stroke: lineColors[store.index] }} markStyle={{ stroke: '#0099999' }}\n                            onValueMouseOver={d => setState({...state, overSecondPerStoreGraph: d})}\n                            onValueMouseOut={d => setState({...state, overSecondPerStoreGraph: false})}\n                        />\n                    ))}\n                    {state.overSecondPerStoreGraph && \n                    <Hint value={state.overSecondPerStoreGraph}>\n                        <HintDiv>\n                            <p><span>Período:</span> {state.labels[state.overSecondPerStoreGraph.x]}</p>\n                            <p><span>Total de clientes acumulado:</span> {state.overSecondPerStoreGraph.y}</p>\n                        </HintDiv>\n                    </Hint>}\n                </XYPlot>\n            </GraphSection>\n            <DiscreteColorLegend width={550} items={legendItems}/>\n        </AllGraphSection>\n\n        <Section>\n            <TextSection><span>Tabela</span></TextSection>\n            <button onClick={() => {setState({...state, tablesExplanation: !state.tablesExplanation})}}>?</button>\n        </Section>\n\n        {state.tablesExplanation ?\n        \n        <SubText>A tabela exibe os mesmos dados que o gráfico, permitindo ordenar os dados no tempo e, principalmente, em relação à quantidade de clientes em cada período.</SubText>\n    \n        : <></>}\n\n        <TableContainer className={classes.container}>\n            <Table stickyHeader aria-label=\"sticky table\">\n                <TableHead>\n                    <TableRow>\n                        <MainHeaderTableCell />\n                        {columns.map((column) => (\n                            <MainHeaderTableCell\n                                key={column.id}\n                                align={column.align}\n                                style={{ minWidth: column.minWidth }}\n                                sortDirection={state.orderBy === column.id ? state.order : false}\n                            >\n                                <TableSortLabel\n                                    active={state.orderBy === column.id}\n                                    direction={state.orderBy === column.id ? state.order : 'asc'}\n                                    onClick={createSortHandler(column.id)}\n                                >\n                                    {column.label}\n                                    {state.orderBy === column.id ? (\n                                        <span className={classes.visuallyHidden}>\n                                            {state.order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                        </span>\n                                    ) : null}\n                                </TableSortLabel>\n                            </MainHeaderTableCell>\n                        ))}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {stableSort(state.rows, getComparator(state.order, state.orderBy)).slice(state.page * state.rowsPerPage, (state.page + 1) * state.rowsPerPage).map((row) => (\n                        <TableRow className={classes.root}>\n                            <BodyTableCell />\n                            {columns.map((column) => (\n                                <BodyTableCell align={column.align}>{row[column.id]}</BodyTableCell>\n                            ))}\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n        <StyledTablePagination \n            rowsPerPageOptions={[10, 25, 50, 100]}\n            labelRowsPerPage=\"Períodos por página:\"\n            labelDisplayedRows={({ from, to, count }) => `${from}-${to} de ${count}`}\n            component=\"div\"\n            count={state.rows.length}\n            rowsPerPage={state.rowsPerPage}\n            page={state.page}\n            onChangePage={(e, newPage) => {setState({...state, page: newPage})}}\n            onChangeRowsPerPage={e => {setState({...state, rowsPerPage: e.target.value, page: 0})}}\n        />\n        </>\n    );\n}\n\nexport default Statistics;"]},"metadata":{},"sourceType":"module"}